&НаКлиенте
Процедура СообщитьОкном(Сообщение, Заголовок)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Сообщение", Сообщение);
	СтруктураПараметров.Вставить("Заголовок", Заголовок);
	ОткрытьФорму("Справочник.ТелеграмБоты.Форма.ФормаСообщения", 
		СтруктураПараметров, 
		ЭтаФорма, 
		Новый УникальныйИдентификатор, , , , 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИзменитьДатыПриИзмененииПериода();
	ИзменитьВидимостьДоступностьТекст();
	УстановитьПолныйАдресВебхука();
	Элементы.КомандыБота.Видимость = Ложь;
	Элементы.СпособСвязи.Доступность = Объект.СпособСвязи <> ПредопределенноеЗначение("Перечисление.ТелеграмСпособыСвязи.Вебхук");
	Элементы.РазблокироватьСпособСвязи.Видимость = Объект.СпособСвязи = ПредопределенноеЗначение("Перечисление.ТелеграмСпособыСвязи.Вебхук");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
	КонецЕсли;
	
	Если ЭтаФорма.ТолькоПросмотр Тогда
		Элементы.ПолучитьТокен.Доступность = Ложь;
		Элементы.ВводТокена.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьДоступностьТекст()
	
	ВводТокена = ?(ЗначениеЗаполнено(Объект.Токен), "введён", "введите...");
	Элементы.ПолучитьТокен.Видимость = НЕ ЗначениеЗаполнено(Объект.Токен);
	Элементы.ПользователиБота.Видимость = Объект.ОграниченныйДоступ;
	ВводСертификата = ?(Объект.ИспользуетсяСамозаверенныйСертификат, ?(ЗначениеЗаполнено(Объект.СамозаверенныйСертификат), "введён", "введите..."), "");
	Элементы.СтраницаРегламентноеЗадание.Видимость = Объект.СпособСвязи = ПредопределенноеЗначение("Перечисление.ТелеграмСпособыСвязи.РегламентноеЗадание");
	Элементы.СтраницаВебхук.Видимость = Объект.СпособСвязи = ПредопределенноеЗначение("Перечисление.ТелеграмСпособыСвязи.Вебхук");
	Элементы.ОткрытьОбработкуПолученияОбновлений.Видимость = Объект.СпособСвязи = ПредопределенноеЗначение("Перечисление.ТелеграмСпособыСвязи.ОбработчикОжидания");
	Элементы.Таймаут.Видимость = (Объект.СпособСвязи = ПредопределенноеЗначение("Перечисление.ТелеграмСпособыСвязи.РегламентноеЗадание") ИЛИ Объект.СпособСвязи = ПредопределенноеЗначение("Перечисление.ТелеграмСпособыСвязи.ОбработчикОжидания"));
	Элементы.ТаймаутСоединения.Видимость = (Объект.СпособСвязи = ПредопределенноеЗначение("Перечисление.ТелеграмСпособыСвязи.РегламентноеЗадание") ИЛИ Объект.СпособСвязи = ПредопределенноеЗначение("Перечисление.ТелеграмСпособыСвязи.ОбработчикОжидания"));
	Элементы.РучноеОбновление.Доступность = Объект.СпособСвязи = ПредопределенноеЗначение("Перечисление.ТелеграмСпособыСвязи.Вручную");
	
КонецПроцедуры

&НаКлиенте
Процедура ВводТокенаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводТокенаВыбор", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещения, Объект.Токен, "Токен бота", 60, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводТокенаВыбор(Токен, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Токен) = Тип("Строка") Тогда
		Объект.Токен = Токен;
		ЭтотОбъект.Модифицированность = Истина;
		ИзменитьВидимостьДоступностьТекст();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтладкаПриИзменении(Элемент)
	
	ИзменитьВидимостьДоступностьТекст();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьСервера(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Необходимо сначала записать объект");
		Возврат;
	КонецЕсли;
	
	Ответ = ДоступностьСервераНаСервере();
	СообщитьОкном(Ответ, "Проверка доступности сервера Telegram");
 	
КонецПроцедуры

&НаСервере
Функция ДоступностьСервераНаСервере()
	
	Сервер = Объект.АдресАпи;
	
	Если Объект.ИспользуетсяПрокси Тогда
		Прокси = Новый ИнтернетПрокси;
		ПроксиОбъект = Объект.НастройкаПрокси.ПолучитьОбъект();
		Прокси.Установить(
			ПроксиОбъект.ПроксиПротокол, 
			ПроксиОбъект.ПроксиСервер, 
			ПроксиОбъект.ПроксиПорт, 
			ПроксиОбъект.ПроксиПользователь, 
			ПроксиОбъект.ПроксиПароль);
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос;
	Соединение = Новый HTTPСоединение(
		Сервер,,,,Прокси,10,
		Новый ЗащищенноеСоединениеOpenSSL);
		
	Попытка
		ОтветСервера = Соединение.ОтправитьДляОбработки(Запрос);
		Возврат СтрШаблон(
			"Ответ с %1 получен — сервер доступен", Сервер);
	Исключение
		Возврат СтрШаблон(
			"%1 не отвечает. Возможные причины и/или способы решения:
			|1 — отсутствует интернет-соединение;
			|2 — %1 недоступен; 
			|3 — %1 заблокирован, необходимы прокси или VPN", Сервер);
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция КтоЯНаСервер()
	
	Возврат ТелеграмСервер.ВыполнитьМетодТелеграм(Объект.Ссылка, "getMe");
	
КонецФункции

&НаКлиенте
Процедура КтоЯ(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Необходимо сначала записать объект");
		Возврат;
	КонецЕсли;
	
	ОтветСервера = КтоЯНаСервер();
	СтрокаОтвета = ?(ОтветСервера.ЭтоJSON, ОтветСервера.СтрокаJSON, ОтветСервера.Строка);
	
	Если ОтветСервера.Свойство("Структура") 
		И ОтветСервера.Структура.Свойство("ok")
		И ОтветСервера.Структура.ok
		И ОтветСервера.Структура.Свойство("result")
		И ОтветСервера.Структура.result.Свойство("username")
		И Объект.ИмяБота <> "@" +ОтветСервера.Структура.result.username Тогда
		
		Объект.ИмяБота = "@" +ОтветСервера.Структура.result.username;
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
	СообщитьОкном(СтрокаОтвета, "Ответ сервера Telegram");
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ГруппаОграничениеПрав.Видимость = НЕ ПравоДоступа("Администрирование", Метаданные);
	Элементы.ПолучитьТокен.Доступность = ПравоДоступа("Изменение", Метаданные.Справочники.ТелеграмБоты);
	Элементы.ВводТокена.Доступность = ПравоДоступа("Изменение", Метаданные.Справочники.ТелеграмБоты);
	Элементы.УстановитьКоманды.Доступность = ПравоДоступа("Изменение", Метаданные.Справочники.ТелеграмБоты);
	ОбновитьСостояниеСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОтобразитьРегламентныеЗадания();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРегламентныеЗадания()
	
	Если НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	Регламентные.Очистить();
	
	МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(
		Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ТелеграмПолучениеОбновлений));
		
	Для Каждого Задание Из МассивЗаданий Цикл
		Если Задание.Параметры.Количество() > 0 И Задание.Параметры[0] = Объект.Ссылка Тогда
			НоваяСтрока = Регламентные.Добавить();
			НоваяСтрока.Использование = Задание.Использование;
			НоваяСтрока.Наименование = Задание.Наименование;
			НоваяСтрока.ИмяПользователя = Задание.ИмяПользователя;
			НоваяСтрока.УникальныйИдентификатор = Задание.УникальныйИдентификатор;
			НоваяСтрока.Расписание = Строка(Задание.Расписание);
			ПоследнееФоновоеЗадание = Задание.ПоследнееЗадание;
			Если ПоследнееФоновоеЗадание <> Неопределено Тогда
				НоваяСтрока.Состояние = Строка(ПоследнееФоновоеЗадание.Состояние);
				НоваяСтрока.Начало = ПоследнееФоновоеЗадание.Начало;
				НоваяСтрока.Конец = ПоследнееФоновоеЗадание.Конец;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеПриАктивизацииСтроки(Элемент)
	
	ОтобразитьФоновыеЗаданияКлиент();	
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьФоновыеЗадания(ИдентификаторРегламентногоЗадания)
	
	Если НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	Фоновые.Очистить();
	
	Отбор = Новый Структура;
	
	Если ЗначениеЗаполнено(ФоновыеДатаНачала) Тогда
		Отбор.Вставить("Начало", ФоновыеДатаНачала);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФоновыеДатаОкончания) Тогда
		Отбор.Вставить("Конец", ФоновыеДатаОкончания);
	КонецЕсли;
	
	Отбор.Вставить("РегламентноеЗадание", 
		РегламентныеЗадания.НайтиПоУникальномуИдентификатору(
		ИдентификаторРегламентногоЗадания));
	
	Если ЗначениеЗаполнено(ФоновыеСостояния) Тогда
		Соответствие = Новый Соответствие;
		Соответствие.Вставить(1, СостояниеФоновогоЗадания.Завершено);
		Соответствие.Вставить(2, СостояниеФоновогоЗадания.ЗавершеноАварийно);
		Соответствие.Вставить(3, СостояниеФоновогоЗадания.Отменено);
		Соответствие.Вставить(4, СостояниеФоновогоЗадания.Активно);
		Отбор.Вставить("Состояние", Соответствие.Получить(ФоновыеСостояния));
	КонецЕсли;
	
	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Для Каждого Задание Из МассивЗаданий Цикл
		НоваяСтрока = Фоновые.Добавить();
		НоваяСтрока.Начало = Задание.Начало;
		НоваяСтрока.Конец = Задание.Конец;
		НоваяСтрока.Расположение = Задание.Расположение;
		НоваяСтрока.Состояние = Строка(Задание.Состояние);
		НоваяСтрока.УникальныйИдентификатор = Задание.УникальныйИдентификатор;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДатыПриИзмененииПериода()
	
	Если ФоновыеПериод = 0 Тогда // последние 10 минут
		ФоновыеДатаНачала = ТекущаяДата() - 60 * 10;
		ФоновыеДатаОкончания = Неопределено;
	ИначеЕсли ФоновыеПериод = 1 Тогда // последний час
		ФоновыеДатаНачала = ТекущаяДата() - 60 * 60;
		ФоновыеДатаОкончания = Неопределено;
	ИначеЕсли ФоновыеПериод = 2 Тогда // этот день
		ФоновыеДатаНачала = НачалоДня(ТекущаяДата());
		ФоновыеДатаОкончания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновыеПериодПриИзменении(Элемент)
	
	ИзменитьДатыПриИзмененииПериода();
	ОтобразитьФоновыеЗаданияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновыеДатаПриИзменении(Элемент)
	
	ОтобразитьФоновыеЗаданияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьФоновыеЗаданияКлиент()
	
	Фоновые.Очистить();
	ТекущиеДанные = Элементы.Регламентные.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОтобразитьФоновыеЗадания(ТекущиеДанные.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновыеСостоянияПриИзменении(Элемент)
	
	ОтобразитьФоновыеЗаданияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРегламентные(Команда)
	
	ОтобразитьРегламентныеЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФоновые(Команда)
	
	ОтобразитьФоновыеЗаданияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРегламентноеЗадание(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Необходимо сначала записать объект");
		Возврат;
	КонецЕсли;
	
	Если КоличествоЗаданий() > 0 Тогда
		ПоказатьПредупреждение(, "Регламентное задание уже есть");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ТелеграмБоты.Форма.ФормаСозданияРегламентногоЗадания", 
		Новый Структура("Бот", Объект.Ссылка),
		ЭтаФорма,
		УникальныйИдентификатор,
		,
		,
		Новый ОписаниеОповещения("СоздатьРегламентноеЗаданиеВыбор", ЭтаФорма), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция КоличествоЗаданий()
	
	КоличествоЗаданий = 0;	
	МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(
		Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ТелеграмПолучениеОбновлений));
		
	Для Каждого Задание Из МассивЗаданий Цикл
		Если Задание.Параметры.Количество() > 0 И Задание.Параметры[0] = Объект.Ссылка Тогда
			КоличествоЗаданий = КоличествоЗаданий + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат КоличествоЗаданий;
	
КонецФункции

&НаКлиенте
Процедура СоздатьРегламентноеЗаданиеВыбор(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОтобразитьРегламентныеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеИспользованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Регламентные.ТекущиеДанные;
	ИзменитьРеквизитЗадания("Использование", ТекущиеДанные.Использование, ТекущиеДанные.УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ИзменитьРеквизитЗадания(ИмяРеквизита, НовоеЗначение, ИдентификаторЗадания)
	
	Регламентное = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Регламентное[ИмяРеквизита] = НовоеЗначение;
	Регламентное.Записать();
	
КонецФункции

&НаКлиенте
Процедура РегламентныеИмяПользователяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Регламентные.ТекущиеДанные;
	МассивПользователей = ПолучитьПользователей();
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(МассивПользователей);
	СписокВыбора.ПоказатьВыборЭлемента(
		Новый ОписаниеОповещения("РегламентныеИмяПользователяВыбор", ЭтаФорма), 
		"Выберите пользователя", ТекущиеДанные.ИмяПользователя);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПользователей()
	
	МассивПользователей = Новый Массив;
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл
		МассивПользователей.Добавить(ПользовательИБ.Имя);
	КонецЦикла;
	Возврат МассивПользователей;
	
КонецФункции

&НаКлиенте
Процедура РегламентныеИмяПользователяВыбор(Результат, ДП) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ЭлементСпискаЗначений") Тогда
		ТекущиеДанные = Элементы.Регламентные.ТекущиеДанные;
		ТекущиеДанные.ИмяПользователя = Результат.Значение;
		ИзменитьРеквизитЗадания("ИмяПользователя", ТекущиеДанные.ИмяПользователя, ТекущиеДанные.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеРасписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Регламентные.ТекущиеДанные;
	Расписание = РасписаниеРегламентногоЗадания(ТекущиеДанные.УникальныйИдентификатор);
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Диалог.Показать(Новый ОписаниеОповещения("РегламентныеРасписаниеВыбор", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеРасписаниеВыбор(Результат, ДП) Экспорт
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		ТекущиеДанные = Элементы.Регламентные.ТекущиеДанные;
		ИзменитьРеквизитЗадания("Расписание", Результат, ТекущиеДанные.УникальныйИдентификатор);
		ТекущиеДанные.Расписание = Строка(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасписаниеРегламентногоЗадания(ИдентификаторЗадания)
	
	Возврат РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания).Расписание;
	
КонецФункции

&НаКлиенте
Процедура РегламентныеНаименованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Регламентные.ТекущиеДанные;
	ИзменитьРеквизитЗадания("Наименование", ТекущиеДанные.Наименование, ТекущиеДанные.УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегламентноеЗадание(Команда)
	
	ТекущиеДанные = Элементы.Регламентные.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИдентификаторЗадания = ТекущиеДанные.УникальныйИдентификатор;
		ДополнительныеПараметры = Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания);
		ОО = Новый ОписаниеОповещения("УдалитьРегламентноеЗаданиеВыбор", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОО, "Удалить регламентное задание?", РежимДиалогаВопрос.ОКОтмена,,,"Подтвердите удаление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегламентноеЗаданиеВыбор(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.ОК Тогда
		УдалитьРегламентноеЗаданиеСервер(ДополнительныеПараметры.ИдентификаторЗадания);
		ОтобразитьРегламентныеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРегламентноеЗаданиеСервер(ИдентификаторЗадания)
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если РегламентноеЗадание <> Неопределено Тогда
		РегламентноеЗадание.Удалить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВебхукАдресПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВебхукАдрес) 
		И Сред(Объект.ВебхукАдрес, СтрДлина(Объект.ВебхукАдрес)) <> "/" Тогда
		Объект.ВебхукАдрес = Объект.ВебхукАдрес + "/";
	КонецЕсли;
	
	УстановитьПолныйАдресВебхука();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПолныйАдресВебхука()
	
	ПолныйАдресВебхука = Объект.ВебхукАдрес + Объект.ВебхукКлюч;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВебхукКлючПриИзменении(Элемент)
	
	УстановитьПолныйАдресВебхука();
	
КонецПроцедуры

&НаКлиенте
Процедура ГУИДКакКлюч(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВебхукКлюч) Тогда
			Объект.ВебхукКлюч = УникальныйИдентификатор(Объект.Ссылка);
		Иначе
			ПоказатьПредупреждение(, "Значение уже заполнено");
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, 
			СтрШаблон("Боту %1 ещё не присвоен уникальный идентификатор,
			|так как элемент ещё не записан", Объект.Наименование));
	КонецЕсли;
	
	УстановитьПолныйАдресВебхука();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УникальныйИдентификатор(Ссылка)
	
	Возврат Ссылка.УникальныйИдентификатор();
	
КонецФункции

&НаКлиенте
Процедура Посетить(Команда)
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПосетитьПродолжение", ЭтаФорма),
		СтрШаблон("Сейчас будет открыта ссылка %1.
		|Если полный адрес указан корректно и http-сервис 'Телеграм — вебхук'
		|опубликован и также работает корректно то отобразится страница
		|с заголовком ""Привет, я Get-метод бота Telegram""", 
		ПолныйАдресВебхука),
		РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПосетитьПродолжение(Результат, ДП) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		НачатьЗапускПриложения(
			Новый ОписаниеОповещения("ОткрытьСсылкуЗавершение", ТелеграмКлиент),
			ПолныйАдресВебхука);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяСамозаверенныйСертификатПриИзменении(Элемент)
	
	ИзменитьВидимостьДоступностьТекст();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСертификатаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьВводСтроки(
		Новый ОписаниеОповещения("ВводСертификатаВыбор", ЭтаФорма),
		Объект.СамозаверенныйСертификат,
		"Введите содержимое сертификата (*.pem)",
		, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСертификатаВыбор(Результат, ДП) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Объект.СамозаверенныйСертификат = Результат;
		ЭтаФорма.Модифицированность = Истина;
		ИзменитьВидимостьДоступностьТекст();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОВебхуке(Команда)
	
	//Если ЭтаФорма.Модифицированность Тогда
	//	ПоказатьПредупреждение(, "Элемент не записан",, "Ошибка");
	//	Возврат;
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Токен) Тогда
		ПоказатьПредупреждение(, "Токен не заполнен",, "Ошибка");
		Возврат;
	КонецЕсли;
	
	ОтветСервера = ИнформацияОВебхукеСервер();
	ОтветСтрокой = ?(ОтветСервера.ЭтоJSON, ОтветСервера.СтрокаJSON, ОтветСервера.Строка);
	СообщитьОкном(ОтветСтрокой, "Ответ сервера Telegram");
	
КонецПроцедуры

&НаСервере
Функция ИнформацияОВебхукеСервер()
	
	Возврат ТелеграмСервер.ВыполнитьМетодТелеграм(Объект.Ссылка, "getWebhookInfo");
	
КонецФункции

&НаКлиенте
Процедура УстановитьВебхук(Команда)
	
	//Если ЭтаФорма.Модифицированность Тогда
	//	ПоказатьПредупреждение(, "Элемент не записан",, "Ошибка");
	//	Возврат;
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Токен) Тогда
		ПоказатьПредупреждение(, "Токен не заполнен",, "Ошибка");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон("Для бота будет установлен Webhook по адресу %1, продолжить?", ПолныйАдресВебхука);
	ПоказатьВопрос(
		Новый ОписаниеОповещения("УстановитьВебхукВыбор", ЭтаФорма),
		ТекстВопроса,
		РежимДиалогаВопрос.ОКОтмена,,,
		"Подтвердите действие");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВебхукВыбор(КодВозврата, ДП) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.ОК Тогда
		ОтветСервера = УстановитьВебхукСервер();
		ОтветСтрока = ?(ОтветСервера.ЭтоJSON, ОтветСервера.СтрокаJSON, ОтветСервера.Строка);
		СообщитьОкном(ОтветСтрока, "Ответ сервера Telegram");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьВебхукСервер()
	
	ПараметрыМетода = Новый Структура;
	ПараметрыВыполнения = Новый Структура;
	
	ПараметрыМетода.Вставить("url", ПолныйАдресВебхука);
	Если ЗначениеЗаполнено(Объект.ВебхукIPАдрес) Тогда
		ПараметрыМетода.Вставить("ip_address", Объект.ВебхукIPАдрес);
	КонецЕсли;
	Если Объект.ИспользуетсяСамозаверенныйСертификат Тогда
		ПотокВПамяти = Новый ПотокВПамяти;
		ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти, КодировкаТекста.UTF8);
		ЗаписьДанных.ЗаписатьСтроку(Объект.СамозаверенныйСертификат);
		ЗаписьДанных.Закрыть();
		Сертификат = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
		ПараметрыМетода.Вставить("certificate", Сертификат);
	Иначе
		ПараметрыВыполнения.Вставить("СпособЗапроса", Перечисления.ТелеграмСпособыЗапросов.URL);
	КонецЕсли;
	ОтветСервера = ТелеграмСервер.ВыполнитьМетодТелеграм(Объект.Ссылка, "setWebhook", ПараметрыМетода, ПараметрыВыполнения);
	Возврат ОтветСервера;

КонецФункции

&НаКлиенте
Процедура УдалитьВебхук(Команда)
	
	//Если ЭтаФорма.Модифицированность Тогда
	//	ПоказатьПредупреждение(, "Элемент не записан",, "Ошибка");
	//	Возврат;
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Токен) Тогда
		ПоказатьПредупреждение(, "Токен не заполнен",, "Ошибка");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Webhook бота будет удалён. Продолжить?";
	ПоказатьВопрос(
		Новый ОписаниеОповещения("УдалитьВебхукВыбор", ЭтаФорма),
		ТекстВопроса,
		РежимДиалогаВопрос.ОКОтмена,,,
		"Подтвердите действие");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВебхукВыбор(КодВозврата, ДП) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.ОК Тогда
		ОтветСервера = УдалитьВебхукСервер();
		ОтветСтрока = ?(ОтветСервера.ЭтоJSON, ОтветСервера.СтрокаJSON, ОтветСервера.Строка);
		СообщитьОкном(ОтветСтрока, "Ответ сервера Telegram");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьВебхукСервер()
	
	ОтветСервера = ТелеграмСервер.ВыполнитьМетодТелеграм(Объект.Ссылка, "deleteWebhook");
	Возврат ОтветСервера;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьКоманды(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		ПоказатьПредупреждение(, "Элемент не записан",, "Ошибка");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Токен) Тогда
		ПоказатьПредупреждение(, "Токен не заполнен",, "Ошибка");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьКомандыВыбор", ЭтаФорма);
	
	Если КомандыБота.Количество() > 0 Тогда
		ПоказатьВопрос(
			ОписаниеОповещения, 
			"Таблица команд бота не пустая. Перезаполнить её командами, полученными с сервера Telegram?",
			РежимДиалогаВопрос.ОКОтмена,,, "Подтвердите перезаполнение таблицы");
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКомандыВыбор(КодВозврата, ДП) Экспорт
	
	Элементы.КомандыБота.Видимость = Истина;
	КомандыБота.Очистить();
	ОтветСервера = ПолучитьКомандыСервер();
	ОтветСтрока = ?(ОтветСервера.ЭтоJSON, ОтветСервера.СтрокаJSON, ОтветСервера.Строка);
	СообщитьОкном(ОтветСтрока, "Ответ сервера Telegram");
	ЗаполнитьМассивКомандСервер(ОтветСервера);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивКомандСервер(ОтветСервера)
	
	Если ОтветСервера.ЭтоJSON Тогда
		Структура = ОтветСервера.Структура;
		Если Структура.ok Тогда
			МассивКоманд = Структура.result;
			Если МассивКоманд <> Неопределено Тогда
				Для Каждого Структура Из МассивКоманд Цикл
					НоваяСтрока = КомандыБота.Добавить();
					НоваяСтрока.Команда = Структура.command;
					НоваяСтрока.Описание = Структура.description;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКомандыСервер()
	
	ОтветСервера = ТелеграмСервер.ВыполнитьМетодТелеграм(Объект.Ссылка, "getMyCommands");
	Возврат ОтветСервера;
	
КонецФункции

&НаКлиенте
Процедура КомандыБотаКомандаПриИзменении(Элемент)
	
	Маска = "1234567890_qwertyuiopasdfghjklzxcvbnm";
	СработалаФильтрация = Ложь;
	КомандаБота = Элементы.КомандыБота.ТекущиеДанные.Команда;
	мКомандаБота = "";
	Для ИИ = 1 По СтрДлина(КомандаБота) Цикл
		ТекС = нРег(Сред(КомандаБота, ИИ, 1));
		Если СтрНайти(Маска, ТекС) = 0 Тогда
			СработалаФильтрация = Истина;
		Иначе
			мКомандаБота = мКомандаБота + ТекС;
		КонецЕсли;
	КонецЦикла;
	Элементы.КомандыБота.ТекущиеДанные.Команда = мКомандаБота;
	Если СработалаФильтрация Тогда
		Сообщить("Команда может содержать только строчные английские буквы, цифры и подчеркивания, остальные символы были удалены");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоманды(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		ПоказатьПредупреждение(, "Элемент не записан",, "Ошибка");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Токен) Тогда
		ПоказатьПредупреждение(, "Токен не заполнен",, "Ошибка");
		Возврат;
	КонецЕсли;
	
	Если КомандыБота.Количество() = 0 Тогда
		ТекстСообщения = Новый ФорматированнаяСтрока(
			"Список команд пустой. Для удаления всех команд используйте ",
			Новый ФорматированнаяСтрока("@BotFather",,,,"https://t.me/BotFather"));
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьКомандыВыбор", ЭтаФорма);
	ТекстВопроса = "Отправить на сервер Telegram установленные команды бота?";
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,, "Подтвердите отправку команд");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомандыВыбор(КодВозврата, ДП) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.ОК Тогда
		ОтветСервера = УстановитьКомандыСервер();
		ОтветСтрока = ?(ОтветСервера.ЭтоJSON, ОтветСервера.СтрокаJSON, ОтветСервера.Строка);
		СообщитьОкном(ОтветСтрока, "Ответ сервера Telegram");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьКомандыСервер()
	
	МассивКоманд = Новый Массив;
	Для Каждого ТекущаяСтрока Из КомандыБота Цикл
		Структура = Новый Структура("command, description", ТекущаяСтрока.Команда, ТекущаяСтрока.Описание);
		МассивКоманд.Добавить(Структура);
	КонецЦикла;
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("commands", МассивКоманд);
	ОтветСервера = ТелеграмСервер.ВыполнитьМетодТелеграм(Объект.Ссылка, "setMyCommands", ПараметрыМетода);
	Возврат ОтветСервера;
	
КонецФункции

&НаКлиенте
Процедура ФоновыеИнформацияОбОшибкеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СообщитьОкном(ФоновоеИнформацияОбОшибке, "Информация об ошибке фонового задания");
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновыеПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Фоновые.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Состояние = "Задание завершено с ошибками" Тогда
		ФоновоеИнформацияОбОшибке = ИнформацияОбОшибкеФоновогоЗадания(ТекущиеДанные.УникальныйИдентификатор);
	Иначе                         
		ФоновоеИнформацияОбОшибке = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнформацияОбОшибкеФоновогоЗадания(ИдентификаторЗадания)
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно И ФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
	Иначе
		ИнформацияОбОшибке = "";
	КонецЕсли;
	Возврат ИнформацияОбОшибке;
	
КонецФункции

&НаКлиенте
Процедура СпособСвязиПриИзменении(Элемент)
	
	ИзменитьВидимостьДоступностьТекст();
	Элементы.СпособСвязи.Доступность = Объект.СпособСвязи <> ПредопределенноеЗначение("Перечисление.ТелеграмСпособыСвязи.Вебхук");
	Элементы.РазблокироватьСпособСвязи.Видимость = Объект.СпособСвязи = ПредопределенноеЗначение("Перечисление.ТелеграмСпособыСвязи.Вебхук");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОтобразитьРегламентныеЗадания();
	ОбновитьСостояниеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьСпособСвязи(Команда)
	
	ОО = Новый ОписаниеОповещения("РазблокироватьСпособСвязиВыбор", ЭтаФорма);
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("Да", "Вебхук удалён");
	КнопкиВопроса.Добавить("Нет", "Отмена");
	ПоказатьВопрос(ОО, "При изменении способа связи с вебхука на другой убедитесь,
	|что вебхук удалён с сервера (""Действия с вебхуком -> Удалить"")", КнопкиВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьСпособСвязиВыбор(Результат, ДП) Экспорт
	
	Если Результат = "Да" Тогда
		Элементы.СпособСвязи.Доступность = Истина;
		Элементы.РазблокироватьСпособСвязи.Видимость = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСостояниеСервер()
	
	Состояние = Справочники.ТелеграмБоты.СостояниеБотаВФорматеHTML(Объект.Ссылка);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбновитьСостояние(Команда)
	
	ОбновитьСостояниеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РучноеОбновление(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ ЭтаФорма.Модифицированность Тогда
		ПоказатьПредупреждение(, "Элемент не записан",, "Ошибка");
		Возврат;
	КонецЕсли;
	
	Если Объект.СпособСвязи = ПредопределенноеЗначение("Перечисление.ТелеграмСпособыСвязи.Вебхук") Тогда
		ПоказатьПредупреждение(, "Ручное обновление недоступно при способе связи 'Вебхук'");
		Возврат;
	КонецЕсли;
	
	РучноеОбновлениеСервер();
	
КонецПроцедуры

&НаСервере
Процедура РучноеОбновлениеСервер()
	
	ТелеграмСервер.ПолучитьОбновления(Объект.Ссылка, Перечисления.ТелеграмСпособыСвязи.Вручную);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиБотаНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОткрытьФорму("Справочник.ТелеграмЧатыПользователи.ФормаСписка", Новый Структура("Бот", Объект.Ссылка));
	Иначе
		ПоказатьПредупреждение(, "Элемент не записан");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОграниченныйДоступПриИзменении(Элемент)
	
	ИзменитьВидимостьДоступностьТекст();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокенНажатие(Элемент)
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПолучитьТокенПродолжение", ЭтаФорма),
		"Сейчас будет открыта ссылка на Telegram-бота BotFather.
		|BotFather - единственный бот, который правит ими всеми. 
		|Используйте его для создания новых учетных записей ботов
		|и управления существующими ботами.",
		РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокенПродолжение(Результат, ДП) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		НачатьЗапускПриложения(
			Новый ОписаниеОповещения("ОткрытьСсылкуЗавершение", ТелеграмКлиент), 
			"https://t.me/botfather");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработкуПолученияОбновлений(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		ПоказатьПредупреждение(, "Элемент не записан");
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Бот", Объект.Ссылка);
	ОткрытьФорму("Обработка.ТелеграмПолучениеОбновлений.Форма", ПараметрыОткрытия);
	
КонецПроцедуры