&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Найдены = Объект.Условия.НайтиСтроки(Новый Структура("Родитель, Код", 0, 1));
	Если Найдены.Количество() = 0 Тогда
		НоваяСтрока = Объект.Условия.Добавить();
		НоваяСтрока.Родитель = 0;
		НоваяСтрока.Код = 1;
		НоваяСтрока.ЛогическаяГруппа = Перечисления.ТелеграмЛогическиеГруппы.ГруппаИ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьДеревоУсловий();
	ОбновитьКодОбработок();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоУсловий()
	
	ДеревоУсловий.ПолучитьЭлементы().Очистить();
	ЭлементыДерева = Новый Соответствие;
	Для Каждого ТекущаяСтрока Из Объект.Условия Цикл
		Родитель = ЭлементыДерева.Получить(ТекущаяСтрока.Родитель);
		Если Родитель = Неопределено Тогда
			ЭлементДерева = ДеревоУсловий.ПолучитьЭлементы().Добавить();
		Иначе
			ЭлементДерева = Родитель.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтрока.ЛогическаяГруппа) Тогда
			ЭлементДерева.Условие = ТекущаяСтрока.ЛогическаяГруппа;
			ЭлементДерева.Группа = Истина;
		Иначе
			ЭлементДерева.Условие = ТекущаяСтрока.Условие;
			ЭлементДерева.ВидСравнения = ТекущаяСтрока.ВидСравнения;
			ЭлементДерева.Значение = ТекущаяСтрока.Значение;
			ЭлементДерева.Картинка = ?(ЭтоПредопределенныйЭлемент(ТекущаяСтрока.Условие), 5, 3);
		КонецЕсли;
		ЭлементДерева.Код = ТекущаяСтрока.Код;
		ЭлементыДерева.Вставить(ЭлементДерева.Код, ЭлементДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование И Элемент.ТекущиеДанные.Код = 1 Тогда
		Отказ = Истина;
	Иначе
		Отказ = Элемент.ТекущиеДанные.Группа = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(Строка) <> Тип("Число") Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДеревоУсловий.НайтиПоИдентификатору(Строка);
	Если НЕ ТекущаяСтрока.Группа Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	Приемник = ДеревоУсловий.НайтиПоИдентификатору(Строка);
	
	Для Каждого ИдентификаторСтроки Из ПараметрыПеретаскивания.Значение Цикл
		ТекущаяСтрока = ДеревоУсловий.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущаяСтрока.Код = 1 Тогда
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			Прервать;
		КонецЕсли;
		ПриемникВЭлементахТекущейСтроки = Ложь;
		ПроверкаВложенности(Приемник, ТекущаяСтрока, ПриемникВЭлементахТекущейСтроки);
		Если ПриемникВЭлементахТекущейСтроки Тогда
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВложенности(Приемник, ТекущаяСтрока, Ответ)
	
	ЭлементыДерева = ТекущаяСтрока.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева = Приемник Тогда
			Ответ = Истина;
			Прервать;
		КонецЕсли;
		ПроверкаВложенности(Приемник, ЭлементДерева, Ответ);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ДеревоУсловий.ТекущиеДанные;
		ТекущиеДанные.Код = НовыйКодСтроки();
		ТекущиеДанные.Картинка = 3;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НовыйКодСтроки()
	
	КодСтроки = 0;
	ЭлементыДерева = ДеревоУсловий.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		МаксимальныйКодСтроки(ЭлементДерева, КодСтроки);
	КонецЦикла;
	КодСтроки = КодСтроки + 1;
	Возврат КодСтроки;
	
КонецФункции

&НаКлиенте
Процедура МаксимальныйКодСтроки(ТекущийЭлемент, КодСтроки)
	
	Если ТекущийЭлемент.Код > КодСтроки Тогда
		КодСтроки = ТекущийЭлемент.Код;
	КонецЕсли;
	
	ЭлементыДерева = ТекущийЭлемент.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		МаксимальныйКодСтроки(ЭлементДерева, КодСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаИ(Команда)
	
	ДобавитьГруппу(ПредопределенноеЗначение("Перечисление.ТелеграмЛогическиеГруппы.ГруппаИ"));
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаИЛИ(Команда)
	
	ДобавитьГруппу(ПредопределенноеЗначение("Перечисление.ТелеграмЛогическиеГруппы.ГруппаИЛИ"));
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаНЕ(Команда)
	
	ДобавитьГруппу(ПредопределенноеЗначение("Перечисление.ТелеграмЛогическиеГруппы.ГруппаНЕ"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппу(ЛогическаяГруппа)
	
	ТекущаяСтрока = Элементы.ДеревоУсловий.ТекущаяСтрока;
	ТекущиеДанные = Элементы.ДеревоУсловий.ТекущиеДанные;
	
	Если ТекущиеДанные.Группа Тогда
		Родитель = ДеревоУсловий.НайтиПоИдентификатору(ТекущаяСтрока);
	Иначе
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Родитель.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Условие = ЛогическаяГруппа;
	НоваяСтрока.Группа = Истина;
	НоваяСтрока.Код = НовыйКодСтроки();
	
	Элементы.ДеревоУсловий.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипЗначения(Условие)
	
	Возврат Условие.ТипЗначения;
	
КонецФункции

&НаКлиенте
Процедура ДеревоУсловийПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоУсловий.ТекущиеДанные;
	Если ТекущиеДанные.Код = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СохранитьУсловия();
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = АвтонаименованиеСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АвтонаименованиеСервиса()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", "Сервис %");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТелеграмСервисы.Наименование
	|ИЗ
	|	Справочник.ТелеграмСервисы КАК ТелеграмСервисы
	|ГДЕ
	|	ТелеграмСервисы.Наименование ПОДОБНО &Наименование";
	
	МаксимальноеЧисло = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ТекущееЧисло = Число(Сред(Выборка.Наименование, 8));
		Исключение
			ТекущееЧисло = 0;
		КонецПопытки;
		Если ТекущееЧисло > МаксимальноеЧисло Тогда
			МаксимальноеЧисло = ТекущееЧисло;
		КонецЕсли;
	КонецЦикла;
	
	ИскомоеЧисло = МаксимальноеЧисло + 1;
	Возврат СтрШаблон("Сервис %1", Формат(ИскомоеЧисло, "ЧГ="));
	
Конецфункции

&НаКлиенте
Процедура СохранитьУсловия()
	
	Объект.Условия.Очистить();
	ЭлементыДерева = ДеревоУсловий.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		СохранитьЭлементДерева(ЭлементДерева, 0);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЭлементДерева(ТекущийЭлемент, Родитель)
	
	НоваяСтрока = Объект.Условия.Добавить();
	НоваяСтрока.Родитель = Родитель;
	НоваяСтрока.Код = ТекущийЭлемент.Код;
	Если ТекущийЭлемент.Группа Тогда
		НоваяСтрока.ЛогическаяГруппа = ТекущийЭлемент.Условие;
	Иначе
		НоваяСтрока.Условие = ТекущийЭлемент.Условие;
		НоваяСтрока.ВидСравнения = ТекущийЭлемент.ВидСравнения;
		НоваяСтрока.Значение = ТекущийЭлемент.Значение;
	КонецЕсли;
	
	ЭлементыДерева = ТекущийЭлемент.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Родитель = ТекущийЭлемент.Код;
		СохранитьЭлементДерева(ЭлементДерева, Родитель);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловийВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоУсловий.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Условие) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ВидыСравненийУсловия(ТекущиеДанные.Условие);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловийВидСравненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоУсловий.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Условие) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ВидыСравненийУсловия(ТекущиеДанные.Условие, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидыСравненийУсловия(Условие, Текст = "")
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Условие", Условие);
	Если ЗначениеЗаполнено(Текст) Тогда
		СтруктураПараметров.Вставить("Текст", Текст);
	КонецЕсли;
	
	Возврат Перечисления.ТелеграмВидыСравнения.ПолучитьДанныеВыбора(СтруктураПараметров);
	
КонецФункции

&НаКлиенте
Процедура ДеревоУсловийУсловиеПриИзменении(Элемент)
	
	ПривестиЗначение();
	
	ТекущиеДанные = Элементы.ДеревоУсловий.ТекущиеДанные;
	Если ТекущиеДанные.Группа Тогда
		ТекущиеДанные.Картинка = 0;
		Возврат;
	КонецЕсли;
	
	ВидыСравнений = ВидыСравненийУсловия(ТекущиеДанные.Условие);
	Если ВидыСравнений.НайтиПоЗначению(ТекущиеДанные.ВидСравнения) = Неопределено Тогда
		ТекущиеДанные.ВидСравнения = Неопределено;
	КонецЕсли;
	
	Если ЭтоПредопределенныйЭлемент(ТекущиеДанные.Условие) Тогда
		ТекущиеДанные.Картинка = 5;
	Иначе
		ТекущиеДанные.Картинка = 3;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПредопределенныйЭлемент(Условие)
	
	Если НЕ ЗначениеЗаполнено(Условие) Тогда
		Возврат Ложь;
	Иначе
		Возврат Условие.Предопределенный;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ДеревоУсловийПриАктивизацииСтроки(Элемент)
	
	ПривестиЗначение();
	
	ТекущиеДанные = Элементы.ДеревоУсловий.ТекущиеДанные;
	Если ТекущиеДанные.Группа Тогда
		Элементы.ДеревоУсловийУсловие.ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.ТелеграмЛогическиеГруппы");
	Иначе
		Элементы.ДеревоУсловийУсловие.ОграничениеТипа = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ТелеграмУсловия");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиЗначение()
	
	ТекущиеДанные = Элементы.ДеревоУсловий.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Группа Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Условие) Тогда
		ТипЗначенияУсловия = ТипЗначения(ТекущиеДанные.Условие);
	Иначе
		ТипЗначенияУсловия = ВсеТипыЗначенияПлана();
	КонецЕсли;
	
	ТекущиеДанные.Значение = ТипЗначенияУсловия.ПривестиЗначение(ТекущиеДанные.Значение);
	Элементы.ДеревоУсловийЗначение.ОграничениеТипа = ТипЗначенияУсловия;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВсеТипыЗначенияПлана()
	
	Возврат Метаданные.ПланыВидовХарактеристик.ТелеграмУсловия.Тип;
	
КонецФункции

&НаКлиенте
Процедура ДеревоУсловийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Приемник = ДеревоУсловий.НайтиПоИдентификатору(Строка);
	
	Для Каждого ИдентификаторСтроки Из ПараметрыПеретаскивания.Значение Цикл
		
		Источник = ДеревоУсловий.НайтиПоИдентификатору(ИдентификаторСтроки);
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
		ЭлементыИсточника = Источник.ПолучитьЭлементы();
		Для Каждого ЭлементИсточника Из ЭлементыИсточника Цикл
			СкопироватьРекурсивно(ЭлементИсточника, НоваяСтрока);
		КонецЦикла;
		
		РодительИсточника = Источник.ПолучитьРодителя();
		ЭлементыРодителя = РодительИсточника.ПолучитьЭлементы();
		ТекущийИндекс = 0; 
		Для Каждого ЭлементРодителя Из ЭлементыРодителя Цикл
			Если ЭлементРодителя = Источник Тогда
				ИндексИсточника = ТекущийИндекс;
			КонецЕсли;
			ТекущийИндекс = ТекущийИндекс + 1;
		КонецЦикла;
		ЭлементыРодителя.Удалить(ИндексИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьРекурсивно(ТекущийЭлементДерева, Приемник)
	
	НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийЭлементДерева);
	ЭлементыДерева = ТекущийЭлементДерева.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		СкопироватьРекурсивно(ЭлементДерева, НоваяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКодОбработок()
	
	ОбновитьКодОбработокСервер();
	КодОбработокHTML = ТелеграмКлиент.РаскраситьКод(КодОбработок);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКодОбработокСервер()
	
	МассивОбработок = Новый Массив;
	Для Каждого ТекущаяСтрока Из Объект.Обработки Цикл
		Если МассивОбработок.Найти(ТекущаяСтрока.Обработка) = Неопределено Тогда
			МассивОбработок.Добавить(ТекущаяСтрока.Обработка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбработок", МассивОбработок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТелеграмОбработки.Ссылка КАК Обработка,
	|	ТелеграмОбработки.Наименование,
	|	ТелеграмОбработки.КодОбработки
	|ИЗ
	|	Справочник.ТелеграмОбработки КАК ТелеграмОбработки
	|ГДЕ
	|	ТелеграмОбработки.Ссылка В(&МассивОбработок)";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ВыводитьНаименование = Объект.Обработки.Количество() > 1;
	
	КодОбработок = "";
	
	Для Каждого ТекущаяСтрока Из Объект.Обработки Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Обработка) Тогда
			СтрокаРезультата = ТаблицаРезультата.Найти(ТекущаяСтрока.Обработка, "Обработка");
			Если ВыводитьНаименование Тогда
				Если ЗначениеЗаполнено(КодОбработок) Тогда
					КодОбработок = КодОбработок + Символы.ПС;
				КонецЕсли;
				КодОбработок = КодОбработок + "// " + СтрокаРезультата.Наименование + Символы.ПС;
			КонецЕсли;
			КодОбработок = КодОбработок + СтрокаРезультата.КодОбработки + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкиПослеУдаления(Элемент)
	
	ОбновитьКодОбработок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьКодОбработок();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры