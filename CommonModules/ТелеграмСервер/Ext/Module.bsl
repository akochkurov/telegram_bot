

// Процедура ТелеграмСервер.ВыполнитьКодОбработки выполняет код обработки
//
// Параметры:
//  1 — Бот — СправочникСсылка.ТелеграмБоты — текущий бот
//  2 — Обработка — СправочникСсылка.ТелеграмОбработки — текущая обработка
//  3 — КодОбработки — строка — выполняемый код
//  4 — Вход — структура — входящие данные
//
//  При выполнении через сервис структура Вход содержит следующие ключи:
//		
//	• Текст — строка или неопределено — текст сообщения
//	• ПараметрыРассылки — Структура — значения параметров запускаемой рассылки (структура присутствует только при запуске из рассылки)
//	• ОтветКК — строка или неопределено — данные отправки с контекстной клавиатуры
//	• Чат — СправочникСсылка.ТелеграмЧатыПользователи — текущий чат
//	• ИдЧата — число или неопределено — идентификатор чата
//	• ПараметрыЧата — Структура — значения параметров чата
//	• Пользователь — СправочникСсылка.ТелеграмЧатыПользователи — текущий пользователь
//	• ПараметрыУведомления — Структура — Структура куда следует помещать произвольные данные для отправки уведомлений, в последующих обработках  
//	• ИдПользователя — число или неопределено — идентификатор пользователя
//	• ПараметрыПользователя — Структура — значения параметров пользователя
//	• ИдСообщения — число или неопределено — идентификатор текущего сообщения
//	• ОтветИдСообщения — число или неопределено — идентификатор сообщение через нажатие ответ на сообщение
//	• Сообщение — структура или неопределено — message (1)
//	• СообщениеКК — структура или неопределено — message контекстной клавиатуры (2)
//	• ПрерватьВыполнение — Булево — при установке в 'Истина' никакие обработки после этой выполнены не будут
//	• ВыполненныеОбработки — таблица значений с колонками Сервис и Обработка — выполненные в этом обновлении обработки
//	• + все ключи текущего update
//
//  (1) Заполненная структура, если это сообщение, отредактированное сообщение, пост из канала или отредактированный пост из канала
//  (2) Заполненная структура, если это нажатие кнопки на контекстной клавиатуре, и описывает сообщение, которому принадлежит кнопка контекстной клавиатуры
//	
Процедура ОтладкаКода(Бот, ОбработкаСсылка, КодОбработки, Вход)
	
	//Клавиатуры
	//ПредыдущиеРеквизитыПлатежаКК
	//ЗакончитьЗагрузкуФайловКК
	//НужнаКвитанциияОбОплатеКК
	//ВводСрочностиКК
	//ВводДатыСегодняКК
	//НаличиеФайловКК
	//ПредыдущееФИО
	
	//Реквизиты
	//НазначениеПлатежа
	//РеквизитыПлатежа
	//СканПервички
	//СуммаПлатежа
	//ФИОПолучателяПлатежа
	//ДатаПлатежа
	//ЭтоСрочно
	//ТребуетсяКвитанция
	//ИдентификаторСообщенияОЗагрузкеФайлов
	//ПредыдущееФИОПолучателяПлатежа
	
	//Статусы
	//ЖдуВводНазначениеПлатежа
	//ЖдуВводРеквизитовПлатежа
	//ЖдуВводСкановПервички
	//ЖдуВводСуммыПлатежа
	//ЖдуВводФИОПолучателяПлатежа
	//ЖдуВводДатыПлатежа
	//ЖдуВводСрочности
	//ЖдуВводТребуетсяКвитанция  
	
	
	
	Команды = Новый Структура();
	Команды.Вставить("Заглушка","empty");
	Команды.Вставить("ГлавноеМеню","MAIN_MENU");	
	Команды.Вставить("Процесс","CREATING_RDSB");
	
	//ВводСрочностиКК
	Команды.Вставить("Срочно", Команды.Процесс + "_FAST");	
	Команды.Вставить("НеСрочно", Команды.Процесс + "_SLOW");
	
	//ВводТипаПлатежаКК
	Команды.Вставить("Услуги", Команды.Процесс + "_SERV");	
	Команды.Вставить("Товары", Команды.Процесс + "_GDS");
	
	//ВводДатыСегодняКК
	Команды.Вставить("Сегодня", Команды.Процесс + "_TODAY");	
	
	//ПредыдущиеРеквизитыМассивКК
	Команды.Вставить("ПредыдущиеРеквизиты", Команды.Процесс + "_" + "PrevAcc_");
	//Команды.Вставить("Валюта + СимвольныйКод", Команды.Процесс + "_" + "PrevAcc_1");
	//Команды.Вставить("Валюта + СимвольныйКод", Команды.Процесс + "_" + "PrevAcc_2");
	//Команды.Вставить("Валюта + СимвольныйКод", Команды.Процесс + "_" + "PrevAcc_3");
	//Команды.Вставить("Валюта + СимвольныйКод", Команды.Процесс + "_" + "PrevAcc_4");
	Команды.Вставить("ПоискПоСтроке", Команды.Процесс + "_" + "FindAcc_");
	//ПредыдущееФИОКК
	Команды.Вставить("ПредыдущееФИО", Команды.Процесс + "_LASTFIO");	
	
	//НужнаКвитанциияОбОплатеКК
	Команды.Вставить("НужнаКвитанция", Команды.Процесс + "_NEEDFILE");	
	Команды.Вставить("НеНужнаКвитанция", Команды.Процесс + "_NONEEDFILE");
	
	//ЗакончитьЗагрузкуФайловКК
	Команды.Вставить("ОстановитьЗагрузку", Команды.Процесс + "_STOPLOADFILE");	
	
	////ПредыдущиеРеквизитыПлатежаКК
	//Команды.Вставить("ПредыдущиеРеквизиты", Команды.Процесс + "_LASTACCOUNT");	
	
	//НаличиеФайловКК
	Команды.Вставить("ОстановитьЗагрузку", Команды.Процесс + "_STOPLOADFILE");		
	
	
	
	
	
	СтруктураСозданиеЗаявокДДС = ПрочитатьПараметр(Вход.ПараметрыПользователя,"СозданиеЗаявокДДС");
	СтруктураРеквизиты = ПрочитатьПараметр(СтруктураСозданиеЗаявокДДС,"Реквизиты");
	СтруктураСтатусы = ПрочитатьПараметр(СтруктураСозданиеЗаявокДДС,"Статусы");
	ТекстСообщения = "";
	ИмяКлавиатуры = "ВозвратВМеню";
	РучнаяОтправкаОтвета = Ложь;
	УдалитьСообщение = Ложь;
	ЗначениеРаспознано = Ложь;
	Ид = "";
	
	Если СтруктураСтатусы.ЖдуВводТребуетсяКвитанция = Истина Тогда //9
		
		ТекстСодержитОтветКлавиатуры = ЗначениеЗаполнено(Вход.ОтветКК);   		
		ЗначениеРаспознано = ТекстСодержитОтветКлавиатуры;		
		
		Если ЗначениеРаспознано Тогда
			
			ТребуетсяКвитанция = Вход.ОтветКК = Команды.НужнаКвитанция;
			
			УстановитьПараметр(Вход.Пользователь, "ТекущийПроцесс.СоздаетЗаявкуДДС", Ложь);
			
			ВставитьПараметр(СтруктураСтатусы, "ЖдуВводТребуетсяКвитанция", Ложь);
			ВставитьПараметр(СтруктураРеквизиты, "ТребуетсяКвитанция", ТребуетсяКвитанция);
			ВставитьПараметр(СтруктураСтатусы, "ЖдуВводТребуетсяКвитанция", Ложь);
			ВставитьПараметр(СтруктураСтатусы, "ГотовКСозданиюЗаявки", Истина);
			
			ПамяткаДляПользователя =  "Статус заявки и скачать квитанцию можно в " + "" + """Отчете по заявкам"""+ "";
			
			ТекстСообщения = ":white_check_mark:Заявка создана." + 
			Символы.ПС + 
			Символы.ПС + 
			ПамяткаДляПользователя;
			
			
		КонецЕсли;
		
	ИначеЕсли СтруктураСтатусы.ЖдуВводСкановПервички = Истина Тогда //8
		
		ТекстСодержитОтветКлавиатуры = ЗначениеЗаполнено(Вход.ОтветКК);   		
		ТекущиеСканыПервички = "";
		
		Если ТекстСодержитОтветКлавиатуры Тогда
			
			ЗначениеРаспознано = Истина;	
			
		Иначе
			ЭтоФото = СодержитФотографии(Вход) ИЛИ СодержитДокумент(Вход);
			
			Если ЭтоФото Тогда
				Отказ = Ложь;
				
				МассивСсылок = ПреобразоватьИзПараметраМассив(Вход.ПараметрыПользователя,"СозданиеЗаявокДДС.Реквизиты.СканПервички");
				
				Отказ = МассивСсылок.Количество()>=5; 
				
				Если НЕ Отказ Тогда
					//ТекущиеСканыПервички = ЗагрузитьПрисоединенныйФайлИзСообщения(Бот, Вход, "СканПервич_");
					ТекущиеСканыПервички = ОбработатьИнформациюОФайле(Вход);
					ДобавитьУстановитьВПараметрМассивЗначений(Вход.ПараметрыПользователя,Вход.Пользователь,"СозданиеЗаявокДДС.Реквизиты.СканПервички",ТекущиеСканыПервички, Отказ);
					МассивСсылок = ПреобразоватьИзПараметраМассив(Вход.ПараметрыПользователя,"СозданиеЗаявокДДС.Реквизиты.СканПервички");
				КонецЕсли;
				
				
				Идентификатор = ПрочитатьПараметр(Вход.ПараметрыПользователя,"СозданиеЗаявокДДС.Идентификаторы.СообщениеОЗагрузкеФайл");
				Идентификатор = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Идентификатор);
				
				РучнаяОтправкаОтвета = Истина;
				
				ИмяКлавиатуры = "ЗакончитьЗагрузкуФайловКК";
				ТекстСообщения = "Загружено файлов: " + ""+ Строка(МассивСсылок.Количество())+"/5" + "";			 
				
				Если Отказ Тогда
					ТекстСообщения = ТекстСообщения + 
					Символы.ПС + 
					"Превышен лимит количества файлов!"+ 
					Символы.ПС +
					"Файлов больше добавить нельзя!" +
					Символы.ПС +
					"Вы можете нажать " + "" + """Завершить прикрепление файлов""" + "";
				Иначе
					ТекстСообщения = ТекстСообщения +
					Символы.ПС +
					"Вы можете нажать" + "" + """Завершить прикрепление файлов""" + "" + " или прикрепить файлы еще.";
				КонецЕсли;
				
				ЕстьСчетчик = ЗначениеЗаполнено(Идентификатор);
				ЕстьНовоеФотоПослеСчетчика = (Вход.ИдСообщения > Идентификатор) И ЕстьСчетчик;
				
				Если НЕ ЕстьСчетчик Тогда
					
					УдалитьСообщения(Бот, Вход, Вход.ИдСообщения -1);
					УдалитьИДСообщенияИзПараметра(Вход.Пользователь, Вход.ПараметрыПользователя, "Идентификаторы.ИДСообщений", Вход.ИдСообщения -1);
					
				КонецЕсли;
				
				Если НЕ ЕстьСчетчик
					ИЛИ ЕстьНовоеФотоПослеСчетчика Тогда
					
					ПараметрыМетода = Новый Структура;
					ПараметрыМетода.Вставить("Сообщение",  ТекстСообщения);
					ПараметрыМетода.Вставить("Клавиатура", ИмяКлавиатуры);
					ПараметрыМетода.Вставить("Синтаксис", "HTML");
					
					Ид = ОтправитьСообщениеИВернутьИдентификатор(Бот, ПараметрыМетода, Вход);
					УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Идентификаторы.СообщениеОЗагрузкеФайл", Ид);
					ДобавитьИДСообщенияВПараметр(Вход.Пользователь, Вход.ПараметрыПользователя, "Идентификаторы.ИДСообщений", Ид);
					
				ИначеЕсли ЕстьСчетчик И НЕ ЕстьНовоеФотоПослеСчетчика Тогда
					
					ИзменитьТекстСообщения(Бот, Вход, Идентификатор, ТекстСообщения, ИмяКлавиатуры, "HTML");
					
				КонецЕсли;
				
				
				Если ЕстьСчетчик И ЕстьНовоеФотоПослеСчетчика Тогда
					
					УдалитьСообщения(Бот, Вход, Идентификатор);
					УдалитьИДСообщенияИзПараметра(Вход.Пользователь, Вход.ПараметрыПользователя, "Идентификаторы.ИДСообщений", Идентификатор);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеРаспознано Тогда
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводСкановПервички", Ложь);
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводТребуетсяКвитанция", Истина);
			
			ИмяКлавиатуры = "НужнаКвитанциияОбОплатеКК";
			
			ПамяткаДляПользователя =  "Квитанцию об оплате, можно получить в " + "" + """Отчете по заявкам"""+ "";
			
			ТекстСообщения = "Вам требуется квитанция об оплате?" + 
			Символы.ПС + 
			Символы.ПС + 
			ПамяткаДляПользователя;
			
		КонецЕсли;
		
		
	ИначеЕсли СтруктураСтатусы.ЖдуВводНазначениеПлатежа = Истина   Тогда  //7
		
		ТекущиеНазначениеПлатежа = Вход.Текст;
		ЗначениеРаспознано = ЗначениеЗаполнено(ТекущиеНазначениеПлатежа);
		
		
		Если ЗначениеРаспознано Тогда
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводНазначениеПлатежа", Ложь);
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводСкановПервички", Истина);
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Реквизиты.НазначениеПлатежа", ТекущиеНазначениеПлатежа);		
			
			ИмяКлавиатуры = "НаличиеФайловКК";
			
			ПамяткаДляПользователя =  "Поддерживаются форматы: " + "" + "pdf, jpg, png, tiff" + "";
			
			ТекстСообщения = "Прикрепите сканы первичных документов при их наличии. Но не более 5!"+ 
			Символы.ПС + 
			Символы.ПС + 
			ПамяткаДляПользователя;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураСтатусы.ЖдуВводФИОПолучателяПлатежа = Истина  Тогда //6
		
		
		ТекстСодержитОтветКлавиатуры = ЗначениеЗаполнено(Вход.ОтветКК);   				
		Если ТекстСодержитОтветКлавиатуры Тогда
			
			ТекущиеФИОПолучателяПлатежа = ПрочитатьПараметр(Вход.ПараметрыПользователя,"СозданиеЗаявокДДС.ПредыдущееФИОПолучателяПлатежа");
			ЗначениеРаспознано = ЗначениеЗаполнено(ТекстСодержитОтветКлавиатуры);
		Иначе
			ТекущиеФИОПолучателяПлатежа = Вход.Текст;
			ЗначениеРаспознано = ЗначениеЗаполнено(ТекущиеФИОПолучателяПлатежа);
		КонецЕсли;
		
		Если ЗначениеРаспознано Тогда
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводФИОПолучателяПлатежа", Ложь);
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводНазначениеПлатежа", Истина);
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Реквизиты.ФИОПолучателяПлатежа", ТекущиеФИОПолучателяПлатежа);		
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.ПредыдущееФИОПолучателяПлатежа", ТекущиеФИОПолучателяПлатежа);		
			
			ПамяткаДляПользователя =  "Например: " + Символы.ПС + 
			"Оплата модели на съемках 2,5 часа из кассы Петров сбер 
			|100% ГФГ
			|согласовано с Юлей
			|Оплата сотруднику Петрову П.П.";
			
			ТекстСообщения = "Введите назначение платежа" + 
			Символы.ПС + 
			Символы.ПС + 
			ПамяткаДляПользователя;
			
		КонецЕсли;
		
		
	ИначеЕсли СтруктураСтатусы.ЖдуВводРеквизитовПлатежа = Истина Тогда //7
		
		ТекстСодержитОтветКлавиатуры = ЗначениеЗаполнено(Вход.ОтветКК);
		
		ТекущиеРеквизиты = "";
		ЭтоПрикрепленное = СодержитФотографии(Вход) ИЛИ СодержитДокумент(Вход);
		
		Если ТекстСодержитОтветКлавиатуры Тогда
			ЭтоВводПредыдущихРеквизитов = СтрНайти(Вход.ОтветКК, Команды.ПредыдущиеРеквизиты)>0;
			ЭтоПоискПоСтроке = СтрНайти(Вход.ОтветКК, Команды.ПоискПоСтроке)>0;
			
			Если ЭтоВводПредыдущихРеквизитов Тогда
				ПредыдущиеРеквизитыПлатежаМассив = ПрочитатьПараметр(Вход.ПараметрыПользователя,"СозданиеЗаявокДДС.ПредыдущиеРеквизитыПлатежаМассив");
				Индекс = СтрЗаменить(Вход.ОтветКК,Команды.ПредыдущиеРеквизиты,"");
				ИндексЧислом = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Индекс);
				Если ЗначениеЗаполнено(Индекс) И
					ИндексЧислом <> Неопределено Тогда 
					Если ПредыдущиеРеквизитыПлатежаМассив.Количество()-1 >= ИндексЧислом Тогда
						ТекущиеРеквизиты = ПредыдущиеРеквизитыПлатежаМассив[ИндексЧислом];	
					КонецЕсли;
					
				КонецЕсли;
			ИначеЕсли ЭтоПоискПоСтроке Тогда
				
				ТекущийПоискСчетовТЗ = ПрочитатьПараметр(Вход.ПараметрыПользователя,"СозданиеЗаявокДДС.ТекущийПоискСчетовТЗ");
				Индекс = СтрЗаменить(Вход.ОтветКК,Команды.ПоискПоСтроке,"");
				ИндексЧислом = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Индекс);
				Если ЗначениеЗаполнено(Индекс) И
					ИндексЧислом <> Неопределено Тогда 
					Если ТекущийПоискСчетовТЗ.Количество()-1 >= ИндексЧислом Тогда
						ТекущиеРеквизиты = ТекущийПоискСчетовТЗ[ИндексЧислом].Ссылка;	
					КонецЕсли;
					
				КонецЕсли;
				
				
			КонецЕсли;
			
			ЗначениеРаспознано = ЗначениеЗаполнено(ТекущиеРеквизиты);	
			
		ИначеЕсли ЭтоПрикрепленное Тогда
			//ЭтоСсылка = СтроковыеФункцииКлиентСервер.Строкасло(Вход.Текст);
			ЭтоНомер = Ложь;
			ЭтоСсылка = Ложь;
			
			Если ЭтоПрикрепленное Тогда
				
				//ТекущиеРеквизиты = ЗагрузитьПрисоединенныйФайлИзСообщения(Бот, Вход, "РеквОплат_");
				ТекущиеРеквизиты = ОбработатьИнформациюОФайле(Вход);
				ЗначениеРаспознано = ЗначениеЗаполнено(ТекущиеРеквизиты.file_id);				
				
				
			Иначе
				Номер = Ртк_ОбщийМодульКлиентСервер.УдалитьНедопустимыеСимволы(Вход.Текст,"Цифры");
				ЭтоНомер = ЗначениеЗаполнено(Номер) И СтрДлина(Номер)>=10;
				
				ТекущиеРеквизиты = Номер;
				ЗначениеРаспознано = ЭтоНомер;
				
			КонецЕсли;
			
			//Это поиск строкой
		Иначе
			ТекущийПоискСчетовТЗ = ПоискСчетовПоСтроке(Вход.Текст);	
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Реквизиты.ТекущийПоискСчетовТЗ", ТекущийПоискСчетовТЗ);
			ИмяКлавиатуры = "РезультатПоискаБанковскихСчетовКК";
		КонецЕсли;
		
		Если ЗначениеРаспознано Тогда
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводРеквизитовПлатежа", Ложь);
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводФИОПолучателяПлатежа", Истина);			
			
			Если НЕ ЭтоПрикрепленное Тогда
				УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.ПредыдущиеРеквизитыПлатежа", ТекущиеРеквизиты);
				УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Реквизиты.РеквизитыПлатежа", ТекущиеРеквизиты);
			Иначе
				ДобавитьУстановитьВПараметрМассивЗначений(Вход.ПараметрыПользователя,Вход.Пользователь,"СозданиеЗаявокДДС.Реквизиты.РеквизитыПлатежа", ТекущиеРеквизиты, Отказ);
			КонецЕсли;
			
			ПредыдущееФИОПолучателяПлатежа = ПрочитатьПараметр(Вход.ПараметрыПользователя,"СозданиеЗаявокДДС.ПредыдущееФИОПолучателяПлатежа");
			ТекущееЗначение = "";
			
			Если ЗначениеЗаполнено(ПредыдущееФИОПолучателяПлатежа) Тогда
				ТекущееЗначение = Символы.ПС + "Предыдущие ФИО: " + "" + Строка(ПредыдущееФИОПолучателяПлатежа)+ "";
				ИмяКлавиатуры = "ПредыдущееФИОКК";
			КонецЕсли;
			
			
			ПамяткаДляПользователя =  "Например: " + "" + "Иванов Иван Иванович" + "";
			
			ТекстСообщения = "Введите ФИО получателя" + 
			ТекущееЗначение +
			Символы.ПС + 
			Символы.ПС + 
			ПамяткаДляПользователя;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураСтатусы.ЖдуВводСуммыПлатежа = Истина  Тогда //6
		
		СуммаПлатежа = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Вход.Текст);
		ЗначениеРаспознано = ЗначениеЗаполнено(СуммаПлатежа);
		
		Если ЗначениеРаспознано Тогда
			
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Реквизиты.СуммаПлатежа", СуммаПлатежа);	
			
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводСуммыПлатежа", Ложь);
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводРеквизитовПлатежа", Истина);
			
			ПредыдущиеРеквизитыПлатежа = ПрочитатьПараметр(Вход.ПараметрыПользователя,"СозданиеЗаявокДДС.ПредыдущиеРеквизитыПлатежаМассив");
			ПредыдущиеРеквизитыПлатежа = ?(ТипЗнч(ПредыдущиеРеквизитыПлатежа) = Тип("Массив"),ПредыдущиеРеквизитыПлатежа,Новый Массив());
			ТекущееЗначение = "";
			
			ПамяткаДляПользователя =  "ru = 'Поддерживаются следующие форматы поиска реквизитов оплаты:
			|1. Наименование контрагента, например: ИП Иванов Владимир Петрович или Shantou City или Shantou Toys
			|2. ИНН контрагента или его крайняя часть, например: 1328903809 или 3809 
			|3. Номер счета или его крайняя часть, например: 4388 или 40702810139000004388.
			|Для более точного поиска комбинируйте данные через "","" порядок не важен, например: 4388, Иванов, 3809 или 3809, 4388, Shantou'";
			//пока ссылку не разрешаем прикреплять
			//|4. Ссылка на оплату, например: ВставитьШаблонСсылкиНаОплату"; 
			
			Если ЗначениеЗаполнено(ПредыдущиеРеквизитыПлатежа) Тогда
				ТекстСообщения = "Выберите банковский счет из предыдущих операций или найдите\создайте банковский счет...";
				ИмяКлавиатуры = "ПредыдущиеРеквизитыПоискИлиВводКК";
			Иначе
				ТекстСообщения = "Найдите\создайте банковский счет...";
				//ИмяКлавиатуры = "ПоискИлиВводРеквизитовПлатежаКК";
			КонецЕсли;
			
			ТекстСообщения = ТекстСообщения + 
			Символы.ПС + 
			Символы.ПС + 
			ПамяткаДляПользователя;
			
		КонецЕсли;

	ИначеЕсли СтруктураСтатусы.ЖдуВводВалюты = Истина  Тогда //5
		
		ТекстСодержитОтветКлавиатуры = ЗначениеЗаполнено(Вход.ОтветКК);   		
		СимвольныйКод = "";
		Если Не ТекстСодержитОтветКлавиатуры Тогда
			СимвольныйКод = СокрЛП(Вход.Текст);
		Иначе
			СимвольныйКод = Вход.ОтветКК;
			МассивСимволов = СтрРазделить("_",СимвольныйКод);
			Если МассивСимволов.Количество() > 0 Тогда
				СимвольныйКод = МассивСимволов[МассивСимволов.Количество()-1];
				СимвольныйКод = СокрЛП(СимвольныйКод);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СимвольныйКод) Тогда
			СоответствиеВалют = Ртк_ОбщийМодуль.СоответствиеВалют();	
			Валюта = СоответствиеВалют.Получить(СимвольныйКод);	
			ЗначениеРаспознано = ЗначениеЗаполнено(Валюта);
		Иначе
			ЗначениеРаспознано = Ложь;
		КонецЕсли;
		
		Если ЗначениеРаспознано Тогда
            УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Реквизиты.ВалютаПлатежа", Валюта);		
			
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводВалюты", Ложь);
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводСуммыПлатежа", Истина);
			
			ПамяткаДляПользователя =  "Например: " + ""+ "3200,57" + "";
			
			ТекстСообщения = "Введите сумму платежа" +
			Символы.ПС + 
			Символы.ПС + 
			ПамяткаДляПользователя;
			
		КонецЕсли;
		
	
	ИначеЕсли СтруктураСтатусы.ЖдуВводТипаПлатежа = Истина Тогда //4
		
		ТекстСодержитОтветКлавиатуры = ЗначениеЗаполнено(Вход.ОтветКК);   		
		
		Если ТекстСодержитОтветКлавиатуры Тогда
			ЭтоУслуга = Вход.ОтветКК = Команды.Услуга;
			Если ЭтоУслуга Тогда
				ТипПлатежа = "Услуга";
			Иначе
				ТипПлатежа = "Товар";
			КонецЕсли;
			
			ЗначениеРаспознано = Истина;
		КонецЕсли;
		
		Если ЗначениеРаспознано Тогда
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Реквизиты.ТипПлатежа", ТипПлатежа);
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводТипаПлатежа", Ложь);
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводВалюты", Истина);
			
			ИмяКлавиатуры = "ВводВалютыПлатежаКК";
			ПамяткаДляПользователя =  "Только одна валюта, например: RUB или 493, KGS или 417";
			ТекущееЗначение = "";//Символы.ПС +"Дата по умолчанию: "+ Формат(ТекущаяДата(),"ДЛФ=D");
			
			ТекстСообщения = "Введите код валюты или выберите валюту платежа:" + "" + 
			Символы.ПС + 
			Символы.ПС + 
			ПамяткаДляПользователя;
			
		КонецЕсли;	
		
	
	ИначеЕсли СтруктураСтатусы.ЖдуВводДатыПлатежа = Истина Тогда //3
		
		ТекстСодержитОтветКлавиатуры = ЗначениеЗаполнено(Вход.ОтветКК);   		
		
		Если Не ТекстСодержитОтветКлавиатуры Тогда
			
			Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(Вход.Текст);	
			ЗначениеРаспознано = ЗначениеЗаполнено(Дата) И НачалоДня(Дата) >= НачалоДня(ТекущаяДата());
			Если ЗначениеРаспознано Тогда
				УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Реквизиты.ДатаПлатежа", Дата);		
			КонецЕсли;
		Иначе
			ЗначениеРаспознано = Истина;
		КонецЕсли;
		
		Если ЗначениеРаспознано Тогда
			
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводДатыПлатежа", Ложь);
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводТипаПлатежа", Истина);
			
			ИмяКлавиатуры = "ВводТипПлатежаКК";
			
			//ПамяткаДляПользователя =  "Поддерживаемые форматы, например: " + "" + Формат(ТекущаяДата(),"ДЛФ=D") + "" + " или " + "" + Формат(ТекущаяДата(),"ДФ=dd.MM.yy") + "";
			ТекущееЗначение = "";//Символы.ПС +"Дата по умолчанию: "+ Формат(ТекущаяДата(),"ДЛФ=D");
			ТекстСообщения = "Выберите вид платежа...";
			//ТекстСообщения = "Выберите вид платежа: " + "" + Формат(ТекущаяДата(),"ДЛФ=D") + "" + 
			//ТекущееЗначение + 
			//Символы.ПС + 
			//Символы.ПС + 
			//ПамяткаДляПользователя;
			
		КонецЕсли;	
		
		
	ИначеЕсли СтруктураСтатусы.ЖдуВводСрочности = Истина Тогда //2
		
		ТекстСодержитОтветКлавиатуры = ЗначениеЗаполнено(Вход.ОтветКК);   						
		Если ТекстСодержитОтветКлавиатуры Тогда
			ЭтоСрочно = Вход.ОтветКК = Команды.Срочно;
			ЗначениеРаспознано = Истина;
		КонецЕсли;
		
		
		Если ЗначениеРаспознано Тогда
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Реквизиты.ЭтоСрочно", ЭтоСрочно);
			
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводСрочности", Ложь);
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводДатыПлатежа", Истина);
			УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Реквизиты.ДатаПлатежа", ТекущаяДата());		
			
			ИмяКлавиатуры = "ВводДатыСегодняКК";
			
			ПамяткаДляПользователя =  "Поддерживаемые форматы, например: " + "" + Формат(ТекущаяДата(),"ДЛФ=D") + "" + " или " + "" + Формат(ТекущаяДата(),"ДФ=dd.MM.yy") + "";
			ТекущееЗначение = "";//Символы.ПС +"Дата по умолчанию: "+ Формат(ТекущаяДата(),"ДЛФ=D");
			
			ТекстСообщения = "Введите желаемую дату платежа, но не ранее чем: " + "" + Формат(ТекущаяДата(),"ДЛФ=D") + "" + 
			ТекущееЗначение + 
			Символы.ПС + 
			Символы.ПС + 
			ПамяткаДляПользователя;
		КонецЕсли;
		
	Иначе //Начало процесса создания заявки //1
		
		ИмяКлавиатуры = "ВводСрочностиКК";
		ЗначениеРаспознано = Истина;
		
		УстановитьПараметр(Вход.Пользователь, "СозданиеЗаявокДДС.Статусы.ЖдуВводСрочности", Истина);
		ПамяткаДляПользователя = "" + "Выберите правильный вариант..." + "";
		
		ТекстСообщения = "Это срочная платежка?" + 
		Символы.ПС +
		Символы.ПС +
		ПамяткаДляПользователя; 
		
	КонецЕсли;
	
	
	Если НЕ РучнаяОтправкаОтвета Тогда	
		
		ПараметрыМетода = Новый Структура;
		
		Если НЕ ЗначениеРаспознано Тогда 
			ТекстСообщения = ":thinking:Кажется здесь что-то введено не правильно, повторите ввод..." +
			Символы.ПС +
			ТекстСообщения;
		КонецЕсли;
		ПараметрыМетода.Вставить("Сообщение",  ТекстСообщения);
		ПараметрыМетода.Вставить("Синтаксис", "HTML");
		
		Если ЗначениеЗаполнено(ИмяКлавиатуры) Тогда
			ПараметрыМетода.Вставить("Клавиатура", ИмяКлавиатуры);
		КонецЕсли;
		
		Ид = ОтправитьСообщениеИВернутьИдентификатор(Бот, ПараметрыМетода, Вход);
		
		Если ЗначениеРаспознано Тогда 
			ВсеИд = ПрочитатьПараметр(Вход.ПараметрыПользователя,"Идентификаторы.ИДСообщений");
			УдалитьСообщения(Бот, Вход, ВсеИд);
			УдалитьИДСообщенияИзПараметра(Вход.Пользователь, Вход.ПараметрыПользователя, "Идентификаторы.ИДСообщений", ВсеИд);
		КонецЕсли;
		
		ДобавитьИДСообщенияВПараметр(Вход.Пользователь, Вход.ПараметрыПользователя, "Идентификаторы.ИДСообщений", Ид);
		
	КонецЕсли;
	
КонецПроцедуры



#Область НастройкиИИнициализацияОбмена

Процедура ПолучитьОбновления(Бот, СпособСвязи = Неопределено, Таймаут = Неопределено) Экспорт
	
	НастройкиБота = ТелеграмСерверПовтИсп.НастройкиБота(Бот);
	
	Если НЕ НастройкиБота.Используется Тогда
		Возврат;
	КонецЕсли;
	
	Смещение = РегистрыСведений.ТелеграмСмещение.Получить(Новый Структура("Бот", Бот)).Смещение;
	
	Если Таймаут = Неопределено Тогда
		Если СпособСвязи = Перечисления.ТелеграмСпособыСвязи.Вручную Тогда
			Таймаут = 0;
		ИначеЕсли СпособСвязи = Перечисления.ТелеграмСпособыСвязи.ОбработчикОжидания Тогда
			Таймаут = Макс(НастройкиБота.Таймаут, 5);
		Иначе
			Таймаут = НастройкиБота.Таймаут;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("offset", Смещение + 1);
	ПараметрыМетода.Вставить("timeout", Таймаут);
	
	ПараметрыВыполнения = Новый Структура("СпособСвязи", СпособСвязи);
	Ответ = ВыполнитьМетодТелеграм(Бот, "getUpdates", ПараметрыМетода, ПараметрыВыполнения);
	ВходящиеОбновления = Новый Массив;
	
	Если Ответ.ЭтоJSON Тогда
		ДанныеОтвета = Ответ.Структура;
		Если ДанныеОтвета.ok Тогда
			ВходящиеОбновления = ДанныеОтвета.result;
		КонецЕсли;
	КонецЕсли;
	
	Если ВходящиеОбновления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КартаВыполнения = ТелеграмСерверПовтИсп.КартаВыполнения(Бот);
	ВыборкаСервисов = КартаВыполнения[1].Выбрать();
	ВыборкаУсловийСервисов = КартаВыполнения[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сервис");
	ВыборкаОбработок = КартаВыполнения[3].Выбрать();
	
	НомерОбновления = 0;
	Для Каждого ВходящееОбновление Из ВходящиеОбновления Цикл
		
		НомерОбновления = НомерОбновления + 1;
		РегистрыСведений.ТелеграмСмещение.Зафиксировать(Бот, ВходящееОбновление.update_id);
		ДополнитьСтруктуруВходящегоОбновления(ВходящееОбновление);
		
		РегистрыСведений.ТелеграмСтатистика.ОбновитьСтатистику(Бот, ВходящееОбновление.Чат, ВходящееОбновление.Пользователь);
		
		Если Перечисления.ТелеграмСпециальныеОбработки.ОграниченныйДоступ(НастройкиБота, ВходящееОбновление.Пользователь) Тогда
			ПоляПоиска = Новый Структура("Условие, Используется", 
				Перечисления.ТелеграмСпециальныеОбработки.ОграниченныйДоступ, 
				Истина);
			ВыборкаСпециальныеОбработки = НастройкиБота.СпециальныеОбработки.Выбрать();
			Пока ВыборкаСпециальныеОбработки.НайтиСледующий(ПоляПоиска) Цикл
				Справочники.ТелеграмОбработки.ВыполнитьОбработку(
					ВыборкаСпециальныеОбработки.Обработка, 
					Бот, 
					ВходящееОбновление,,,
					"Ограничен доступ");
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		ПоляПоиска = Новый Структура("Условие, Используется",
			Перечисления.ТелеграмСпециальныеОбработки.ПередВыполнением,
			Истина);
		ВыборкаСпециальныеОбработки = НастройкиБота.СпециальныеОбработки.Выбрать();
		Пока ВыборкаСпециальныеОбработки.НайтиСледующий(ПоляПоиска) Цикл
			Справочники.ТелеграмОбработки.ВыполнитьОбработку(
				ВыборкаСпециальныеОбработки.Обработка, 
				Бот, 
				ВходящееОбновление,,,
				"Перед выполнением");
		КонецЦикла;
		
		ВыборкаУсловийСервисов.Сбросить();
		СервисыДляВыполнения = Справочники.ТелеграмСервисы.СервисыДляВыполнения(ВыборкаУсловийСервисов, ВходящееОбновление);
		Для Каждого Сервис Из СервисыДляВыполнения Цикл
			ВходящееОбновление.Вставить("НомерОбновления", НомерОбновления);
			Справочники.ТелеграмСервисы.ВыполнитьСервис(Сервис, Бот, ВходящееОбновление, ВыборкаОбработок);
		КонецЦикла;
		
		ПоляПоиска = Новый Структура("Условие, Используется", Перечисления.ТелеграмСпециальныеОбработки.ПослеВыполнения, Истина);
		ВыборкаСпециальныеОбработки = НастройкиБота.СпециальныеОбработки.Выбрать();
		Пока ВыборкаСпециальныеОбработки.НайтиСледующий(ПоляПоиска) Цикл
			Справочники.ТелеграмОбработки.ВыполнитьОбработку(
				ВыборкаСпециальныеОбработки.Обработка, 
				Бот, 
				ВходящееОбновление,,,
				"После выполнения");
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВебхукPOST(Запрос) Экспорт
	
	Перем Чат;
	Перем Пользователь;
	
	ВебхукКлюч = СокрЛП(Запрос.ПараметрыURL["Ключ"]);
	Бот = Справочники.ТелеграмБоты.НайтиПоРеквизиту("ВебхукКлюч", ВебхукКлюч);
	
	Если НЕ ЗначениеЗаполнено(Бот) Тогда
		Возврат Новый HTTPСервисОтвет(404);
	КонецЕсли;
	
	НастройкиБота = ТелеграмСерверПовтИсп.НастройкиБота(Бот);
	Если НЕ НастройкиБота.Используется Тогда
		Возврат Новый HTTPСервисОтвет(200);
	КонецЕсли;
	
	СтрокаJSON = Запрос.ПолучитьТелоКакСтроку();
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	ВходящееОбновление = ПрочитатьJSON(ЧтениеJSON);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON());
	ЗаписатьJSON(ЗаписьJSON, ВходящееОбновление);
	ФорматированнаяСтрокаJSON = ЗаписьJSON.Закрыть();
	
	ДополнитьСтруктуруВходящегоОбновления(ВходящееОбновление);
	
	Чат = Неопределено;
	ВходящееОбновление.Свойство("Чат", Чат);
	Пользователь = Неопределено;
	ВходящееОбновление.Свойство("Пользователь", Пользователь);
	
	РегистрыСведений.ТелеграмЖурнал.ДобавитьЗапись(
		Бот,
		Перечисления.ТелеграмСобытияЖурнала.Вебхук,
		Перечисления.ТелеграмСпособыСвязи.Вебхук,
		Чат,
		Пользователь,,
		ФорматированнаяСтрокаJSON);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Бот);
	МассивПараметров.Добавить(ВходящееОбновление);
	НаименованиеЗадания = СтрШаблон("Телеграм - обработка вебхука %1", Строка(Бот));
	ФоновыеЗадания.Выполнить("ТелеграмСервер.ОбработатьВходящееОбновление", МассивПараметров, , НаименованиеЗадания);
	
	Возврат Новый HTTPСервисОтвет(200);
	
КонецФункции

Процедура ОбработатьВходящееОбновление(Бот, ВходящееОбновление) Экспорт
	
	НастройкиБота = ТелеграмСерверПовтИсп.НастройкиБота(Бот);
	ДополнитьСтруктуруВходящегоОбновления(ВходящееОбновление);
	РегистрыСведений.ТелеграмСтатистика.ОбновитьСтатистику(Бот, ВходящееОбновление.Чат, ВходящееОбновление.Пользователь);
	
	Если Перечисления.ТелеграмСпециальныеОбработки.ОграниченныйДоступ(НастройкиБота, ВходящееОбновление.Пользователь) Тогда
		ПоляПоиска = Новый Структура("Условие, Используется", Перечисления.ТелеграмСпециальныеОбработки.ОграниченныйДоступ, Истина);
		ВыборкаСпециальныеОбработки = НастройкиБота.СпециальныеОбработки.Выбрать();
		Пока ВыборкаСпециальныеОбработки.НайтиСледующий(ПоляПоиска) Цикл
			Справочники.ТелеграмОбработки.ВыполнитьОбработку(
				ВыборкаСпециальныеОбработки.Обработка, 
				Бот, 
				ВходящееОбновление,,,"Ограничен доступ");
		КонецЦикла;
		Возврат;
	КонецЕсли;
		
	КартаВыполнения = ТелеграмСерверПовтИсп.КартаВыполнения(Бот);
	ВыборкаСервисов = КартаВыполнения[1].Выбрать();
	ВыборкаУсловийСервисов = КартаВыполнения[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сервис");
	ВыборкаОбработок = КартаВыполнения[3].Выбрать();
	
	ПоляПоиска = Новый Структура("Условие, Используется",
		Перечисления.ТелеграмСпециальныеОбработки.ПередВыполнением,
		Истина);
	ВыборкаСпециальныеОбработки = НастройкиБота.СпециальныеОбработки.Выбрать();
	Пока ВыборкаСпециальныеОбработки.НайтиСледующий(ПоляПоиска) Цикл
		Справочники.ТелеграмОбработки.ВыполнитьОбработку(
			ВыборкаСпециальныеОбработки.Обработка, 
			Бот, 
			ВходящееОбновление,,,
			"Перед выполнением");
	КонецЦикла;
		
	ВыборкаУсловийСервисов.Сбросить();
	СервисыДляВыполнения = Справочники.ТелеграмСервисы.СервисыДляВыполнения(ВыборкаУсловийСервисов, ВходящееОбновление);
	Для Каждого Сервис Из СервисыДляВыполнения Цикл
		Справочники.ТелеграмСервисы.ВыполнитьСервис(Сервис, Бот, ВходящееОбновление, ВыборкаОбработок);
	КонецЦикла;
	
	ПоляПоиска = Новый Структура("Условие, Используется", Перечисления.ТелеграмСпециальныеОбработки.ПослеВыполнения, Истина);
	ВыборкаСпециальныеОбработки = НастройкиБота.СпециальныеОбработки.Выбрать();
	Пока ВыборкаСпециальныеОбработки.НайтиСледующий(ПоляПоиска) Цикл
		Справочники.ТелеграмОбработки.ВыполнитьОбработку(
			ВыборкаСпециальныеОбработки.Обработка, 
			Бот, 
			ВходящееОбновление,,,"После выполнения");
	КонецЦикла;
	
КонецПроцедуры

Функция ВебхукGET(Запрос) Экспорт
	
	СпособыСвязи = Перечисления.ТелеграмСпособыСвязи;
	
	Ключ = СокрЛП(Запрос.ПараметрыURL["Ключ"]);
	Бот = Справочники.ТелеграмБоты.НайтиПоРеквизиту("ВебхукКлюч", Ключ);
	HTML = Справочники.ТелеграмБоты.ПолучитьМакет("МакетGet").ПолучитьТекст();
	Если ЗначениеЗаполнено(Бот) Тогда
		НастройкиБота = ТелеграмСерверПовтИсп.НастройкиБота(Бот);
		БотИмя = НастройкиБота.Имя;
		Используется = Формат(НастройкиБота.Используется, "БЛ=Нет; БИ=Да");
		СпособСвязи = Строка(НастройкиБота.СпособСвязи);
		КлючЦвет = "green";
		БотИмяЦвет = "green";
		ИспользуетсяЦвет = ?(НастройкиБота.Используется, "green", "red");
		СпособСвязиЦвет = ?(НастройкиБота.СпособСвязи = СпособыСвязи.Вебхук, "green", "red");
	Иначе
		БотИмя = "бот не найден";
		Используется = "бот не найден";
		СпособПолученияОбновлений = "бот не найден";
		КлючЦвет = "red";
		БотИмяЦвет = "red";
		ИспользуетсяЦвет = "red";
		СпособПолученияОбновленийЦвет = "red";
	КонецЕсли;
	
	HTML = СтрЗаменить(HTML, "[Ключ]", Ключ);
	HTML = СтрЗаменить(HTML, "[БотИмя]", БотИмя);
	HTML = СтрЗаменить(HTML, "[Используется]", Используется);
	HTML = СтрЗаменить(HTML, "[СпособСвязи]", СпособСвязи);
	HTML = СтрЗаменить(HTML, "[КлючЦвет]", КлючЦвет);
	HTML = СтрЗаменить(HTML, "[БотИмяЦвет]", БотИмяЦвет);
	HTML = СтрЗаменить(HTML, "[ИспользуетсяЦвет]", ИспользуетсяЦвет);
	HTML = СтрЗаменить(HTML, "[СпособСвязиЦвет]", СпособСвязиЦвет);
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(HTML, КодировкаТекста.UTF8);
	
	Возврат Ответ;
	
КонецФункции

Функция Прокси(НастройкиБота)
	
	Если НастройкиБота.ИспользуетсяПрокси Тогда
		Прокси = Новый ИнтернетПрокси;
		Прокси.Установить(
			НастройкиБота.ПроксиПротокол, 
			НастройкиБота.ПроксиСервер, 
			НастройкиБота.ПроксиПорт, 
			НастройкиБота.ПроксиПользователь, 
			НастройкиБота.ПроксиПароль);
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Функция ЗащищенноеСоединение()
	
	Возврат Новый ЗащищенноеСоединениеOpenSSL;
	
КонецФункции

#КонецОбласти

#Область ПрограммнаяСборкаИВыполнение
 
Функция ВыполнитьКодСОтветом(Код, Вход) Экспорт
	
	Ответ = Неопределено;
	Выполнить(Код);
	Возврат Ответ;
	
КонецФункции

Процедура ВыполнитьКодОбработки(Бот, ОбработкаСсылка, КодОбработки, Вход) Экспорт
	
	Выполнить(КодОбработки);
	
КонецПроцедуры

Функция СобратьПрограммнуюКлавиатуру(Бот, КодКлавиатуры, Вход) Экспорт
	
	Перем Клавиатура;
    Выполнить(КодКлавиатуры);
    Возврат Клавиатура;

КонецФункции

#КонецОбласти

#Область СозданиеОбъектов1С

Процедура ТелеграмОчисткаЖурнала() Экспорт
	
	РегистрыСведений.ТелеграмТаймеры.Очистить();
	РегистрыСведений.ТелеграмЖурнал.Очистить();
	
КонецПроцедуры
 
Процедура ЗаписатьНовыйОбъектПользователя(Бот, ЧатПользователь, ОбъектСсылка)
	
	РегистрыСведений.ТелеграмОбъектыПользователей.ЗаписатьНовыйОбъектПользователя(Бот, ЧатПользователь, ОбъектСсылка);
	
КонецПроцедуры

Процедура ОбновитьСсылкуОбъектаПользователя(СтараяСсылка, НоваяСсылка)
	
	РегистрыСведений.ТелеграмОбъектыПользователей.ОбновитьСсылкуОбъектаПользователя(СтараяСсылка, НоваяСсылка);
	
КонецПроцедуры

Функция СоздатьОбновитьЧат(ОбъектЧат)
	
	Перем Чат;
	ИдЧата = ?(ОбъектЧат.Свойство("id"), ОбъектЧат.id, Неопределено);
	Если ИдЧата <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Чат.Ссылка КАК Ссылка,
		|	Чат.чТип КАК чТип,
		|	Чат.чЗаголовок КАК чЗаголовок,
		|	Чат.чИнтернетИмя КАК чИнтернетИмя,
		|	Чат.чИмя КАК чИмя,
		|	Чат.чФамилия КАК чФамилия
		|ИЗ
		|	Справочник.ТелеграмЧатыПользователи КАК Чат
		|ГДЕ
		|	Чат.Ид = &Ид";
		Запрос.УстановитьПараметр("Ид", ИдЧата);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			СпрОб = Справочники.ТелеграмЧатыПользователи.СоздатьЭлемент();
			СпрОб.Ид = ИдЧата;
			СпрОб.Автонаименование = Истина;
			ОбъектЧат.Свойство("type", СпрОб.чТип);
			ОбъектЧат.Свойство("title", СпрОб.чЗаголовок);
			ОбъектЧат.Свойство("username", СпрОб.чИнтернетИмя);
			ОбъектЧат.Свойство("first_name", СпрОб.чИмя);
			ОбъектЧат.Свойство("last_name", СпрОб.чФамилия);
			СпрОб.ДополнительныеСвойства.Вставить("ОтключитьОбработчик_ПриЗаписи", Истина);
			СпрОб.Записать();
			Чат = СпрОб.Ссылка;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			чТип = ?(ОбъектЧат.Свойство("type"), ОбъектЧат.type, "");
			чЗаголовок = ?(ОбъектЧат.Свойство("title"), ОбъектЧат.title, "");
			чИнтернетИмя = ?(ОбъектЧат.Свойство("username"), ОбъектЧат.username, "");
			чИмя = ?(ОбъектЧат.Свойство("first_name"), ОбъектЧат.first_name, "");
			чФамилия = ?(ОбъектЧат.Свойство("last_name"), ОбъектЧат.last_name, "");
			Если Выборка.чТип <> чТип
				ИЛИ Выборка.чЗаголовок <> чЗаголовок
				ИЛИ Выборка.чИнтернетИмя <> чИнтернетИмя
				ИЛИ Выборка.чИмя <> чИмя
				ИЛИ Выборка.чФамилия <> чФамилия Тогда
				СпрОб = Выборка.Ссылка.ПолучитьОбъект();
				СпрОб.чТип = чТип;
				СпрОб.чЗаголовок = чЗаголовок;
				СпрОб.чИнтернетИмя = чИнтернетИмя;
				СпрОб.чИмя = чИмя;
				СпрОб.чФамилия = чФамилия;
				СпрОб.ДополнительныеСвойства.Вставить("ОтключитьОбработчик_ПриЗаписи", Истина);
				СпрОб.Записать();
			КонецЕсли;
			Чат = Выборка.Ссылка;
		КонецЕсли;
	Иначе
		Чат = Неопределено;
	КонецЕсли;
	
	Возврат Чат;
	
КонецФункции

Функция СоздатьОбновитьПользователя(ОбъектПользователь)
	
	Перем Пользователь;
	ИдПользователя = ?(ОбъектПользователь.Свойство("id"), ОбъектПользователь.id, Неопределено);
	
	Если ИдПользователя <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ид", ИдПользователя);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Польз.Ссылка КАК Ссылка,
		|	Польз.пЭтоБот КАК пЭтоБот,
		|	Польз.пИмя КАК пИмя,
		|	Польз.пФамилия КАК пФамилия,
		|	Польз.пИнтернетИмя КАК пИнтернетИмя,
		|	Польз.пКодЯзыка КАК пКодЯзыка
		|ИЗ
		|	Справочник.ТелеграмЧатыПользователи КАК Польз
		|ГДЕ
		|	Польз.Ид = &Ид";
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			СпрОб = Справочники.ТелеграмЧатыПользователи.СоздатьЭлемент();
			СпрОб.Ид = ИдПользователя;
			СпрОб.Автонаименование = Истина;
			ОбъектПользователь.Свойство("is_bot", СпрОб.пЭтоБот);
			ОбъектПользователь.Свойство("first_name", СпрОб.пИмя);
			ОбъектПользователь.Свойство("last_name", СпрОб.пФамилия);
			ОбъектПользователь.Свойство("username", СпрОб.пИнтернетИмя);
			ОбъектПользователь.Свойство("language_code", СпрОб.пКодЯзыка);
			СпрОб.ДополнительныеСвойства.Вставить("ОтключитьОбработчик_ПриЗаписи", Истина);
			СпрОб.Записать();
			Пользователь = СпрОб.Ссылка;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			пЭтоБот = ?(ОбъектПользователь.Свойство("is_bot"), ОбъектПользователь.is_bot, Ложь);
			пИмя = ?(ОбъектПользователь.Свойство("first_name"), ОбъектПользователь.first_name, "");
			пФамилия = ?(ОбъектПользователь.Свойство("last_name"), ОбъектПользователь.last_name, "");
			пИнтернетИмя = ?(ОбъектПользователь.Свойство("username"), ОбъектПользователь.username, "");
			пКодЯзыка = ?(ОбъектПользователь.Свойство("language_code"), ОбъектПользователь.language_code, "");
			Если Выборка.пЭтоБот <> пЭтоБот
				ИЛИ Выборка.пИмя <> пИмя
				ИЛИ Выборка.пФамилия <> пФамилия
				ИЛИ Выборка.пИнтернетИмя <> пИнтернетИмя
				ИЛИ Выборка.пКодЯзыка <> пКодЯзыка Тогда
				СпрОб = Выборка.Ссылка.ПолучитьОбъект();
				СпрОб.пЭтоБот = пЭтоБот;
				СпрОб.пИмя = пИмя;
				СпрОб.пФамилия = пФамилия;
				СпрОб.пИнтернетИмя = пИнтернетИмя;
				СпрОб.пКодЯзыка = пКодЯзыка;
				СпрОб.ДополнительныеСвойства.Вставить("ОтключитьОбработчик_ПриЗаписи", Истина);
				СпрОб.Записать();
			КонецЕсли;
			Пользователь = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Пользователь;
	
КонецФункции

#КонецОбласти

#Область JSON_HTML
 
Функция СоздатьСсылки(Знач HTMLТекст) Экспорт
	
	ПризнакиСсылки = Новый Массив;
	ПризнакиСсылки.Добавить("http://");
	ПризнакиСсылки.Добавить("https://");
	ПризнакиСсылки.Добавить(" www.");
	
	ШаблонЗамены = "<a href=""%1"" title=""Откроется в окне браузера по умолчанию"">%1</a>";
	
	Для Каждого ПризнакСсылки Из ПризнакиСсылки Цикл
		Каретка = 1;
		ПервыйСимволСсылки = СтрНайти(HTMLТекст, ПризнакСсылки, , Каретка);
		Пока ПервыйСимволСсылки > 0 Цикл
			ПервыйПробел = СтрНайти(HTMLТекст, " ", , ПервыйСимволСсылки + 1);
			Если ПервыйПробел = 0 Тогда
				ПолнаяСсылка = Сред(HTMLТекст, ПервыйСимволСсылки);
			Иначе
				ПолнаяСсылка = Сред(HTMLТекст, ПервыйСимволСсылки, ПервыйПробел - ПервыйСимволСсылки);
			КонецЕсли;
			ПоследнийСимволСсылки = Сред(ПолнаяСсылка, СтрДлина(ПолнаяСсылка));
			Если ПоследнийСимволСсылки = "." ИЛИ ПоследнийСимволСсылки = "," Тогда
				ПолнаяСсылка = Лев(ПолнаяСсылка, СтрДлина(ПолнаяСсылка) - 1);
			КонецЕсли;
			ОбрамленнаяСсылка = СтрШаблон(ШаблонЗамены, СокрЛП(ПолнаяСсылка));
			Если ПризнакСсылки = " www." Тогда
				ОбрамленнаяСсылка = " " + ОбрамленнаяСсылка;
			КонецЕсли;
			ДлинаСсылки = СтрДлина(ПолнаяСсылка);
			ДлинаОбрамленнойСсылки = СтрДлина(ОбрамленнаяСсылка);
			HTMLТекст = Лев(HTMLТекст, ПервыйСимволСсылки - 1) + ОбрамленнаяСсылка + Сред(HTMLТекст, ПервыйСимволСсылки + ДлинаСсылки);
			Каретка = ПервыйСимволСсылки + ДлинаОбрамленнойСсылки - 1;
			ПервыйСимволСсылки = СтрНайти(HTMLТекст, ПризнакСсылки, , Каретка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат HTMLТекст;
	
КонецФункции

Функция ПараметрыЗаписиJSON() Экспорт
	
	ПереносСтрок = ПереносСтрокJSON.Авто;
	СимволыОтступа = Символы.Таб;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрок, СимволыОтступа);
	Возврат ПараметрыЗаписиJSON;
	
КонецФункции
 
Функция ОбъектJSON(СтрокаJSON, ЭтоJSON = Неопределено)
	
	Если ЭтоJSON = Неопределено Тогда
		ЭтоJSON = ЭтоJSON(СтрокаJSON);
	КонецЕсли;
	
	Если ЭтоJSON Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		ОбъектJSON = ПрочитатьJSON(ЧтениеJSON);
	Иначе
		ОбъектJSON = Неопределено;
	КонецЕсли;
	
	Возврат ОбъектJSON;
	
КонецФункции

Функция ФорматированнаяСтрокаJSON(Объект)
	
	Если Объект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON());
	ЗаписатьJSON(ЗаписьJSON, Объект);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции
 
Функция ЭкранированиеHTML(Вопрос) Экспорт
	
	Ответ = СтрЗаменить(Ответ, "&", "&amp;");
	Ответ = СтрЗаменить(Вопрос, "<", "&lt;");
	Ответ = СтрЗаменить(Ответ, ">", "&gt;");
	Ответ = СтрЗаменить(Ответ, """", "&quot;");
	Ответ = СтрЗаменить(Ответ, "`", "&#x60;");
	Ответ = СтрЗаменить(Ответ, Символы.ПС, "<br>");
	Возврат Ответ;
	
КонецФункции


#КонецОбласти

#Область УсловияИПроверки

Функция ЕстьПроцедураПолучения(ПараметрТ) Экспорт
	
	Попытка
		ПроцедураПолучения = "Получение_" + ПараметрТ;
		Выполнить(СтрШаблон("%1()", ПроцедураПолучения));
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	Если СтрНайти(ОписаниеОшибки, "Процедура или функция с указанным именем не определена") > 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
	
Функция ЗначениеУсловия(Условие, Вход) Экспорт
	
	Возврат ПланыВидовХарактеристик.ТелеграмУсловия.ЗначениеУсловия(Условие, Вход);
	
КонецФункции
 
Функция ЭтоJSON(СтрокаJSON) Экспорт
	
	Возврат ТипЗнч(СтрокаJSON) = Тип("Строка") И СтрДлина(СтрокаJSON) > 1 И Лев(СтрокаJSON, 1) = "{";
	
КонецФункции

Функция СодержитФотографии(ВходящееОбновление) Экспорт
	
	Возврат ЗначениеЗаполнено(ВходящееОбновление.Сообщение) И ВходящееОбновление.Сообщение.Свойство("photo");
	
КонецФункции

Функция КоличествоФотографий(ВходящееОбновление) Экспорт
	
	Ответ = 0;
	Если ЗначениеЗаполнено(ВходящееОбновление.Сообщение) И ВходящееОбновление.Сообщение.Свойство("photo") Тогда
		Ответ = ВходящееОбновление.Сообщение.photo.Количество();
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции

Функция СодержитДокумент(ВходящееОбновление) Экспорт
	
	Возврат ЗначениеЗаполнено(ВходящееОбновление.Сообщение) И ВходящееОбновление.Сообщение.Свойство("document");
	
КонецФункции

Функция СодержитВидео(ВходящееОбновление) Экспорт
	
	Возврат ЗначениеЗаполнено(ВходящееОбновление.Сообщение) И ВходящееОбновление.Сообщение.Свойство("video");
	
КонецФункции

Функция СодержитВидеозаметку(ВходящееОбновление) Экспорт
	
	Возврат ЗначениеЗаполнено(ВходящееОбновление.Сообщение) И ВходящееОбновление.Сообщение.Свойство("video_note");
	
КонецФункции

Функция СодержитАудио(ВходящееОбновление) Экспорт
	
	Возврат ЗначениеЗаполнено(ВходящееОбновление.Сообщение) И ВходящееОбновление.Сообщение.Свойство("audio");
	
КонецФункции

Функция СодержитКонтакт(ВходящееОбновление) Экспорт
	
	Возврат ЗначениеЗаполнено(ВходящееОбновление.Сообщение) И ВходящееОбновление.Сообщение.Свойство("contact");
	
КонецФункции

Функция СодержитМестоположение(ВходящееОбновление) Экспорт
	
	Возврат ЗначениеЗаполнено(ВходящееОбновление.Сообщение) И ВходящееОбновление.Сообщение.Свойство("location");
	
КонецФункции

Функция СодержитМестоНаКарте(ВходящееОбновление) Экспорт
	
	Возврат ЗначениеЗаполнено(ВходящееОбновление.Сообщение) И ВходящееОбновление.Сообщение.Свойство("venue");
	
КонецФункции

Функция СодержитГолосовоеСообщение(ВходящееОбновление) Экспорт
	
	Возврат ЗначениеЗаполнено(ВходящееОбновление.Сообщение) И ВходящееОбновление.Сообщение.Свойство("voice");
	
КонецФункции

#КонецОбласти

#Область МетодыТелеграм

Процедура УдалитьСообщения(Бот, ВходящееОбновление, ЧислоСтрокаМассив)
	
	Если Не ЗначениеЗаполнено(ЧислоСтрокаМассив) Тогда
		Возврат
	КонецЕСли;
	
	
	Если ТипЗнч(ЧислоСтрокаМассив) = Тип("Число") Тогда
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("ИдСообщения", ЧислоСтрокаМассив);
		ВыполнитьМетод(Бот, "deleteMessage", ПараметрыМетода, ВходящееОбновление);
		
	ИначеЕсли ТипЗнч(ЧислоСтрокаМассив) = Тип("Строка") Тогда
		СписокСообщений = Новый СписокЗначений;
		СписокСообщений.ЗагрузитьЗначения(стрРазделить(ЧислоСтрокаМассив,",", Ложь));
		СписокСообщений.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		
		Для каждого стр из СписокСообщений Цикл
			ПараметрыМетода = Новый Структура;
			ПараметрыМетода.Вставить("ИдСообщения", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(стр.Значение));
			ВыполнитьМетод(Бот, "deleteMessage", ПараметрыМетода, ВходящееОбновление);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ЧислоСтрокаМассив) = Тип("Массив") Тогда
		СписокСообщений = Новый СписокЗначений;
		СписокСообщений.ЗагрузитьЗначения(ЧислоСтрокаМассив);
		СписокСообщений.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		
		Для каждого стр из СписокСообщений Цикл
			ПараметрыМетода = Новый Структура;
			Ид = стр.Значение;
			
			Если ТипЗнч(Ид) = Тип("Строка") Тогда
				Ид = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Ид);
				
			КонецЕсли;
			ПараметрыМетода.Вставить("ИдСообщения", Ид);
			ВыполнитьМетод(Бот, "deleteMessage", ПараметрыМетода, ВходящееОбновление);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ОтправитьСообщениеИВернутьИдентификатор(Бот, ПараметрыМетода, ВходящееОбновление) Экспорт
	
	Ответ =  ОтправитьСообщение(Бот, ПараметрыМетода, ВходящееОбновление);
	Возврат ПрочитатьПараметр(Ответ,"Структура.result.message_id");
	
	
КонецФункции

Функция ОтправитьДокументИВернутьИдентификатор(Бот, ПараметрыМетода, ВходящееОбновление) Экспорт
	
	Ответ =  ВыполнитьМетод(Бот, "sendDocument", ПараметрыМетода, ВходящееОбновление);
	Возврат ПрочитатьПараметр(Ответ,"Структура.result.message_id");
	
КонецФункции

Функция ОтправитьФотографиюИВернутьИдентификатор(Бот, ПараметрыМетода, ВходящееОбновление) Экспорт
	
	Ответ = ВыполнитьМетод(Бот, "sendPhoto", ПараметрыМетода, ВходящееОбновление);
	Возврат ПрочитатьПараметр(Ответ,"Структура.result.message_id");
	
КонецФункции

Функция ОтправитьСообщение(Бот, ПараметрыМетода, ВходящееОбновление) Экспорт
	
	Возврат ВыполнитьМетод(Бот, "sendMessage", ПараметрыМетода, ВходящееОбновление);
	
КонецФункции 

Функция ИзменитьТекстСообщения(Бот, ВходящееОбновление, Идентификатор, НовыйТекст, ИмяКлавиатуры = Неопределено, Синтаксис = Неопределено)

	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ИдСообщения", Идентификатор);
	
	Если ЗначениеЗаполнено(Синтаксис) Тогда
		ПараметрыМетода.Вставить("Синтаксис", Синтаксис);
	КонецЕсли;

	Если ЗначениеЗаполнено(ИмяКлавиатуры) Тогда
		ПараметрыМетода.Вставить("Клавиатура", ИмяКлавиатуры);
	КонецЕсли;
	
	ПараметрыМетода.Вставить("Сообщение", НовыйТекст);
	Возврат ВыполнитьМетод(Бот, "editMessageText", ПараметрыМетода, ВходящееОбновление);

КонецФункции

Процедура ЗапуститьРассылку(ТелеграмРассылка) Экспорт
	
	Справочники.ТелеграмРассылки.ЗапуститьРассылку(ТелеграмРассылка);
	
КонецПроцедуры

Функция ОтправитьФотографию(Бот, ПараметрыМетода, ВходящееОбновление) Экспорт
	
	Возврат ВыполнитьМетод(Бот, "sendPhoto", ПараметрыМетода, ВходящееОбновление);
	
КонецФункции

Функция ОтправитьДокумент(Бот, ПараметрыМетода, ВходящееОбновление) Экспорт
	
	Возврат ВыполнитьМетод(Бот, "sendDocument", ПараметрыМетода, ВходящееОбновление);
	
КонецФункции

Функция ОтветНаНажатиеКнопкиКК(Бот, ПараметрыМетода, ВходящееОбновление) Экспорт
	
	Возврат ВыполнитьМетод(Бот, "answerCallbackQuery", ПараметрыМетода, ВходящееОбновление);
	
КонецФункции

Функция ОтправитьАудио(Бот, ПараметрыМетода, ВходящееОбновление) Экспорт
	
	Возврат ВыполнитьМетод(Бот, "sendAudio", ПараметрыМетода, ВходящееОбновление);
	
КонецФункции

Функция ОтправитьВидео(Бот, ПараметрыМетода, ВходящееОбновление) Экспорт
	
	Возврат ВыполнитьМетод(Бот, "sendVideo", ПараметрыМетода, ВходящееОбновление);
	
КонецФункции

Функция ОтправитьМедиаАльбом(Бот, ПараметрыМетода, ВходящееОбновление) Экспорт
	
	Возврат ВыполнитьМетод(Бот, "sendMediaGroup", ПараметрыМетода, ВходящееОбновление);
	
КонецФункции

Функция ОтправитьТочкуНаКарте(Бот, ПараметрыМетода, ВходящееОбновление) Экспорт
	
	Возврат ВыполнитьМетод(Бот, "sendLocation", ПараметрыМетода, ВходящееОбновление);
	
КонецФункции

Функция ОтправитьМестоНаКарте(Бот, ПараметрыМетода, ВходящееОбновление) Экспорт
	
	Возврат ВыполнитьМетод(Бот, "sendVenue", ПараметрыМетода, ВходящееОбновление);
	
КонецФункции

Функция ОтправитьКонтакт(Бот, ПараметрыМетода, ВходящееОбновление) Экспорт
	
	Возврат ВыполнитьМетод(Бот, "sendContact", ПараметрыМетода, ВходящееОбновление);
	
КонецФункции

Функция ОтправитьДействиеЧата(Бот, ПараметрыМетода, ВходящееОбновление) Экспорт
	
	Возврат ВыполнитьМетод(Бот, "sendChatAction", ПараметрыМетода, ВходящееОбновление);
	
КонецФункции

Функция ВыполнитьМетод(Бот, Метод, Параметры1С, Вход) Экспорт
	
	ПараметрыТ 			= Новый Структура;
	МассивНезаполненных = Новый Массив;
	ОписаниеМетода 		= ТелеграмСерверПовтИсп.ОписаниеМетода(Метод);
	ПараметрыМетода 	= ОписаниеМетода.ПараметрыМетода;
	
	Для Каждого КлючИЗначение Из Параметры1С Цикл
		Параметр1С 			= КлючИЗначение.Ключ;
		ОписаниеПараметра 	= ПараметрыМетода.Найти(Параметр1С, "Наименование");
		ПараметрТ			= ?(ОписаниеПараметра = Неопределено, Неопределено, ОписаниеПараметра.Параметр);
		Если ЗначениеЗаполнено(ПараметрТ) Тогда
			Если ПараметрыТ.Свойство(ПараметрТ) Тогда
				Продолжить;
			КонецЕсли;
			Значение1С 	= КлючИЗначение.Значение;
			ЗначениеТ 	= ЗначениеТелеграм(Бот, Параметр1С, Значение1С, Метод, ОписаниеПараметра, Параметры1С, Вход);
			Если ЗначениеЗаполнено(ЗначениеТ) Тогда
				ПараметрыТ.Вставить(ПараметрТ, ЗначениеТ);
			КонецЕсли;
		Иначе
			Значение1С = КлючИЗначение.Значение;
			Вход.Вставить("ДополнительноеСвойство_" + Параметр1С, Значение1С);
		КонецЕсли;
	КонецЦикла;
	
	ОбязательныеДляПередачи = ПараметрыМетода.НайтиСтроки(Новый Структура("ОбязателенДляПередачи", Истина));
	Для Каждого ОписаниеПараметра Из ОбязательныеДляПередачи Цикл
		ПараметрТ = ОписаниеПараметра.Параметр;
		Если ПараметрыТ.Свойство(ПараметрТ) Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеТ = ЗначениеТелеграм(Бот, Неопределено, Неопределено, Метод, ОписаниеПараметра, Параметры1С, Вход);
		Если ЗначениеЗаполнено(ЗначениеТ) Тогда
			ПараметрыТ.Вставить(ПараметрТ, ЗначениеТ);
		Иначе
			МассивНезаполненных.Добавить(ПараметрТ);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНезаполненных.Количество() > 0 Тогда
		ПозицияChat_Id = МассивНезаполненных.Найти("chat_id");
		Если ПозицияChat_Id <> Неопределено Тогда
			НастройкиБота = ТелеграмСерверПовтИсп.НастройкиБота(Бот);
			Если НастройкиБота.Отладка Тогда
				ПараметрыТ.Вставить("chat_id", НастройкиБота.ИдентификаторЧатаПриОтладке);
			КонецЕсли;
			МассивНезаполненных.Удалить(ПозицияChat_Id);
		КонецЕсли;
		Если МассивНезаполненных.Количество() > 0 Тогда
			ОписаниеОшибки = СтрШаблон("Не указаны один или несколько обязательных параметров, метод %1", Метод);
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыполнитьМетодТелеграм(Бот, Метод, ПараметрыТ, Вход);
	
КонецФункции

Процедура Получение_chat_id(Бот, ЗначениеТ, Параметр1С, Значение1С, Метод, Параметры1С, Вход)
	
	Если ЗначениеЗаполнено(Значение1С) Тогда
		ЗначениеТ = Значение1С;
	ИначеЕсли Вход.Свойство("ИдЧата") Тогда
		ЗначениеТ = Вход.ИдЧата;
	КонецЕсли;
	
КонецПроцедуры

Процедура Получение_reply_markup(Бот, ЗначениеТ, Параметр1С, Значение1С, Метод, Параметры1С, Вход)
	
	Если Параметр1С = "Клавиатура" Тогда
		Клавиатура = Справочники.ТелеграмКлавиатуры.НайтиПоНаименованию(Значение1С);
		ЗначениеТ = Справочники.ТелеграмКлавиатуры.СобратьКлавиатуру(Бот, Клавиатура, Вход);
	ИначеЕсли Параметр1С = "УдалитьКлавиатуру" Тогда
		ЗначениеТ = Справочники.ТелеграмКлавиатуры.УдалитьКлавиатуру();
	ИначеЕсли Параметр1С = "ПринудительныйОтвет" Тогда
		ЗначениеТ = Справочники.ТелеграмКлавиатуры.ПринудительныйОтвет();
	КонецЕсли;
	
КонецПроцедуры

Процедура Получение_from_chat_id(Бот, ЗначениеТ, Параметр1С, Значение1С, Метод, Параметры1С, Вход)
	
	Если ЗначениеЗаполнено(Значение1С) Тогда
		ЗначениеТ = Значение1С;
	ИначеЕсли Вход.Свойство("ИдЧата") Тогда
		ЗначениеТ = Вход.ИдЧата;
	КонецЕсли;
	
КонецПроцедуры

Процедура Получение_message_id(Бот, ЗначениеТ, Параметр1С, Значение1С, Метод, Параметры1С, Вход)
	
	Если ЗначениеЗаполнено(Значение1С) Тогда
		ЗначениеТ = Значение1С;
	ИначеЕсли Вход.Свойство("ИдСообщения") Тогда
		ЗначениеТ = Вход.ИдСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура Получение_callback_query_id(Бот, ЗначениеТ, Параметр1С, Значение1С, Метод, Параметры1С, Вход)
	
	Если ЗначениеЗаполнено(Значение1С) Тогда
		ЗначениеТ = Значение1С;
	ИначеЕсли Вход.Свойство("callback_query") Тогда
		ЗначениеТ = Вход.callback_query.id;
	КонецЕсли;
	
КонецПроцедуры
 	
Функция ВыполнитьМетодТелеграм(Бот, Метод, ПараметрыМетода = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	СпособыЗапросов = Перечисления.ТелеграмСпособыЗапросов;
	
	Если ПараметрыМетода = Неопределено Тогда
		ПараметрыМетода = Новый Структура;
	КонецЕсли;
	
	Если ПараметрыВыполнения = Неопределено Тогда
		ПараметрыВыполнения = Новый Структура;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("РегистрСведений_ТелеграмИдентификаторыФайлов", Новый Массив);
	
	НастройкиБота 	= ТелеграмСерверПовтИсп.НастройкиБота(Бот);
	ОписаниеМетода 	= ТелеграмСерверПовтИсп.ОписаниеМетода(Метод);
	
	Если НастройкиБота.Отладка И ПараметрыМетода.Свойство("chat_id") Тогда
		ПараметрыМетода.Вставить("chat_id", НастройкиБота.ИдентификаторЧатаПриОтладке);
	КонецЕсли;
	
	Если ПараметрыВыполнения.Свойство("СпособЗапроса") Тогда
		СпособЗапроса = ПараметрыВыполнения.СпособЗапроса;
	ИначеЕсли ОписаниеМетода <> Неопределено Тогда
		СпособЗапроса = ОписаниеМетода.СпособЗапроса;
	Иначе
		СпособЗапроса = СпособыЗапросов.URL;
	КонецЕсли;
	
	АдресРесурса = СтрШаблон("/bot%1/%2", НастройкиБота.Токен, Метод);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = АдресРесурса;
	HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
	
	Если СпособЗапроса = СпособыЗапросов.URL Тогда
		ПараметрыСтрокой = "";
		Для Каждого КлючИЗначение Из ПараметрыМетода Цикл
			Если ЗначениеЗаполнено(ПараметрыСтрокой) Тогда
				ПараметрыСтрокой = ПараметрыСтрокой + "&";
			КонецЕсли;
			ЗначениеСтрокой = ЗначениеСтрокой(КлючИЗначение.Значение);
			ЗначениеСтрокой = КодироватьСтроку(ЗначениеСтрокой, СпособКодированияСтроки.URLВКодировкеURL, "UTF-8");
			ЗначениеСтрокой = ВставитьЭмодзи(ЗначениеСтрокой, "Hex");
			ПараметрыСтрокой = ПараметрыСтрокой + КлючИЗначение.Ключ + "=" + ЗначениеСтрокой;
		КонецЦикла;
		Если ЗначениеЗаполнено(ПараметрыСтрокой) Тогда
			HTTPЗапрос.АдресРесурса = HTTPЗапрос.АдресРесурса + "?" + ПараметрыСтрокой;
		КонецЕсли;
	ИначеЕсли СпособЗапроса = СпособыЗапросов.Encoded Тогда
		ПараметрыСтрокой = "";
		Для Каждого КлючИЗначение Из ПараметрыМетода Цикл
			Если ЗначениеЗаполнено(ПараметрыСтрокой) Тогда
				ПараметрыСтрокой = ПараметрыСтрокой + "&";
			КонецЕсли;
			ЗначениеСтрокой = ЗначениеСтрокой(КлючИЗначение.Значение);
			ЗначениеСтрокой = КодироватьСтроку(ЗначениеСтрокой, СпособКодированияСтроки.URLВКодировкеURL, "UTF-8");
			ЗначениеСтрокой = ВставитьЭмодзи(ЗначениеСтрокой, "Hex");
			ПараметрыСтрокой = ПараметрыСтрокой + КлючИЗначение.Ключ + "=" + ЗначениеСтрокой;
		КонецЦикла;
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/x-www-form-urlencoded; charset=utf-8");
		HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыСтрокой);
	ИначеЕсли СпособЗапроса = СпособыЗапросов.JSON Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, ""));
		ЗаписатьJSON(ЗаписьJSON, ПараметрыМетода);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		СтрокаJSON = ВставитьЭмодзи(СтрокаJSON, "UTF8");
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	ИначеЕсли СпособЗапроса = СпособыЗапросов.Multipart Тогда
		ПодготовитьДвоичныеДанные(Бот, ПараметрыМетода, ОписаниеМетода, ПараметрыВыполнения);		
		Разделитель = Строка(Новый УникальныйИдентификатор);
		ПотокВПамяти = Новый ПотокВПамяти;
		ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти, КодировкаТекста.UTF8);
		Для Каждого КлючИЗначение Из ПараметрыМетода Цикл
			ЗаписьДанных.ЗаписатьСимволы("--" + Разделитель);
			ЗаписьДанных.ЗаписатьСимволы(Символы.ПС);
			ЗаписьДанных.ЗаписатьСимволы("Content-Disposition: form-data; name=" + КлючИЗначение.Ключ);
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("ДвоичныеДанные") Тогда
				Если ПараметрыВыполнения.Свойство("ДополнительноеСвойство_ИмяФайла") Тогда
					ИмяФайла = ПараметрыВыполнения.ДополнительноеСвойство_ИмяФайла;
				Иначе
					ИмяФайла = Строка(Новый УникальныйИдентификатор);
				КонецЕсли;
				ЗаписьДанных.ЗаписатьСимволы("; filename=" + ИмяФайла);
			КонецЕсли;
			ЗаписьДанных.ЗаписатьСимволы(Символы.ПС);
			ЗаписьДанных.ЗаписатьСимволы(Символы.ПС);
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("ДвоичныеДанные") Тогда
				ЗаписьДанных.Записать(КлючИЗначение.Значение);
			Иначе
				ЗначениеСтрокой = ЗначениеСтрокой(КлючИЗначение.Значение);
				МассивЗначений = ВставитьЭмодзиБайты(ЗначениеСтрокой);
				Для Каждого ЭлементМассива Из МассивЗначений Цикл
					Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
						ЗаписьДанных.ЗаписатьСимволы(ЭлементМассива);
					Иначе
						ЗаписьДанных.ЗаписатьБайт(ЭлементМассива);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ЗаписьДанных.ЗаписатьСимволы(Символы.ПС);
		КонецЦикла;
		ЗаписьДанных.ЗаписатьСимволы("--" + Разделитель + "--");
		ЗаписьДанных.Закрыть();
		ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
		HTTPЗапрос.Заголовки.Вставить("Content-type", "multipart/form-data; boundary=" + Разделитель + "; charset=utf-8");
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	HTTPСоединение = ТелеграмСерверПовтИсп.HTTPСоединение(
		НастройкиБота.АдресАпи,,,,
		Прокси(НастройкиБота),
		НастройкиБота.ТаймаутСоединения);
		
	HTTPОтвет	= HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	Строка		= HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	ЭтоJSON		= ЭтоJSON(Строка);
	Структура	= ОбъектJSON(Строка, ЭтоJSON);
	СтрокаJSON	= ФорматированнаяСтрокаJSON(Структура);
	
	Ответ = Новый Структура;
	Ответ.Вставить("Строка", Строка);
	Ответ.Вставить("ЭтоJSON", ЭтоJSON);
	Ответ.Вставить("Структура", Структура);
	Ответ.Вставить("СтрокаJSON", СтрокаJSON);
	
	Для Каждого ЭлементМассива Из ПараметрыВыполнения.РегистрСведений_ТелеграмИдентификаторыФайлов Цикл
		Если ЭлементМассива.Действие = "Обновить" Тогда
			МенеджерЗаписи = РегистрыСведений.ТелеграмИдентификаторыФайлов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЭлементМассива);
			МенеджерЗаписи.Прочитать();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЭлементМассива);
			МенеджерЗаписи.Записать();
		ИначеЕсли ЭлементМассива.Действие = "Добавить" И ЭтоJSON Тогда
			File_id = Неопределено;
			Если Ответ.ЭтоJSON И Ответ.Структура.ok И Ответ.Структура.result.Свойство(ЭлементМассива.Параметр) Тогда
				РезультатЗагрузкиПараметра = Ответ.Структура.result[ЭлементМассива.Параметр];
				Если ТипЗнч(РезультатЗагрузкиПараметра) = Тип("Структура") Тогда
					File_id = РезультатЗагрузкиПараметра.file_id;
				ИначеЕсли ТипЗнч(РезультатЗагрузкиПараметра) = Тип("Массив") Тогда
					ПоследнийЭлемент = РезультатЗагрузкиПараметра[РезультатЗагрузкиПараметра.Количество() - 1];
					File_id = ПоследнийЭлемент.file_id;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(File_id) Тогда
				МенеджерЗаписи = РегистрыСведений.ТелеграмИдентификаторыФайлов.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Бот = ЭлементМассива.Бот;
				МенеджерЗаписи.Параметр = ЭлементМассива.Параметр;
				МенеджерЗаписи.КонтрольнаяСумма = ЭлементМассива.КонтрольнаяСумма;
				МенеджерЗаписи.Идентификатор = File_id;
				МенеджерЗаписи.ДатаДобавления = ТекущаяДата();
				МенеджерЗаписи.ДатаСледующейПроверки = ДобавитьМесяц(ТекущаяДата(), 12);
				МенеджерЗаписи.ОтветСервера = Ответ.СтрокаJSON;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Событие 			= Перечисления.ТелеграмСобытияЖурнала.ВыполненМетод;
	СпособСвязи 		= ?(ПараметрыВыполнения.Свойство("СпособСвязи"), ПараметрыВыполнения.СпособСвязи, Неопределено);
	ИдентификаторЧата 	= ?(ПараметрыМетода.Свойство("chat_id"), ПараметрыМетода.chat_id, Неопределено);
	Чат 				= ?(ИдентификаторЧата = Неопределено, Неопределено, Справочники.ТелеграмЧатыПользователи.НайтиПоРеквизиту("Ид", ИдентификаторЧата));
	ОтветСервера 		= ?(Ответ.ЭтоJSON, Ответ.СтрокаJSON, Ответ.Строка);
	Пусто 				= Ответ.Строка = "{""ok"":true,""result"":[]}";
	ОшибкаТелеграм		= НЕ Ответ.ЭтоJSON ИЛИ Лев(Ответ.Строка, 11) = "{""ok"":false";
	
	РегистрыСведений.ТелеграмЖурнал.ДобавитьЗапись(
		Бот, Событие, СпособСвязи, Чат,, Метод,
		ОтветСервера, Пусто,,,,, ОшибкаТелеграм);
		
	Возврат Ответ;	
	
КонецФункции

Процедура ОповеститьОбОшибке(ТекстОшибки) Экспорт
	
	Справочники.ТелеграмРассылки.ОповеститьОбОшибке(ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область Эмодзи
  
Функция ВставитьЭмодзи(Текст, Ресурс)
	
	МассивПозиций = Новый Массив;
	
	НачальнаяПозиция = 1;
	ДлинаТекста = СтрДлина(Текст);
	Позиция = СтрНайти(Текст, ":", , НачальнаяПозиция);
	Пока Позиция > 0 Цикл
		МассивПозиций.Добавить(Позиция);
		НачальнаяПозиция = Позиция + 1;
		Если НачальнаяПозиция > ДлинаТекста Тогда
			Прервать;
		КонецЕсли;
		Позиция = СтрНайти(Текст, ":", , НачальнаяПозиция);
	КонецЦикла;
	
	ИИ = МассивПозиций.Количество() - 1;
	Пока ИИ > 0 Цикл
		АльфаКод = Сред(Текст, МассивПозиций[ИИ-1], МассивПозиций[ИИ] - МассивПозиций[ИИ-1] + 1);
		Если СтрНайти(АльфаКод, " ") > 0 Тогда
			ИИ = ИИ - 1;
		Иначе
			СтрокаЗамены = Эмодзи(АльфаКод, Ресурс);
			Если ЗначениеЗаполнено(СтрокаЗамены) Тогда
				Текст = Лев(Текст, МассивПозиций[ИИ-1] - 1) + СтрокаЗамены + Сред(Текст, МассивПозиций[ИИ] + 1);
				ИИ = ИИ - 2;
			Иначе
				ИИ = ИИ - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

Функция ВставитьЭмодзиБайты(Текст)
	
	МассивПозиций = Новый Массив;
	
	НачальнаяПозиция = 1;
	ДлинаТекста = СтрДлина(Текст);
	
	Позиция = СтрНайти(Текст, ":", , НачальнаяПозиция);
	Пока Позиция > 0 Цикл
		МассивПозиций.Добавить(Позиция);
		НачальнаяПозиция = Позиция + 1;
		Если НачальнаяПозиция > ДлинаТекста Тогда
			Прервать;
		КонецЕсли;
		Позиция = СтрНайти(Текст, ":", , НачальнаяПозиция);
	КонецЦикла;
	
	МассивЭмодзи = Новый Массив;
	
	Для ИИ = 0 По МассивПозиций.Количество() - 2 Цикл
		АльфаКод = Сред(Текст, МассивПозиций[ИИ], МассивПозиций[ИИ+1] - МассивПозиций[ИИ] + 1);
		Если СтрНайти(АльфаКод, " ") > 0 Тогда
			Продолжить;
		КонецЕсли;
		ЭмодзиБайты = Эмодзи(АльфаКод, "Bytes");
		Если ЗначениеЗаполнено(ЭмодзиБайты) Тогда
			сМассивБайтов = СтрРазделить(ЭмодзиБайты, " ", Ложь);
			МассивБайтов = Новый Массив;
			Для Каждого Байт Из сМассивБайтов Цикл
				МассивБайтов.Добавить(Число(Байт));
			КонецЦикла;
			НайденЭмодзи = Новый Структура;
			НайденЭмодзи.Вставить("ПозицияС", МассивПозиций[ИИ]);
			НайденЭмодзи.Вставить("ПозицияПо", МассивПозиций[ИИ+1]);
			НайденЭмодзи.Вставить("МассивБайтов", МассивБайтов);
			МассивЭмодзи.Добавить(НайденЭмодзи);
			ИИ = ИИ + 1;
		КонецЕсли;
	КонецЦикла;
	
	МассивЗначений = Новый Массив;
	
	Если МассивЭмодзи.Количество() = 0 Тогда
		МассивЗначений.Добавить(Текст);
	Иначе
		Если МассивЭмодзи[0].ПозицияС > 1 Тогда
			МассивЗначений.Добавить(Лев(Текст, МассивЭмодзи[0].ПозицияС - 1));
		КонецЕсли;
		Для ИИ = 0 По МассивЭмодзи.Количество() - 1 Цикл
			НайденЭмодзи = МассивЭмодзи[ИИ];
			Для Каждого Байт Из НайденЭмодзи.МассивБайтов Цикл
				МассивЗначений.Добавить(Байт);
			КонецЦикла;
			Если ИИ < МассивЭмодзи.Количество() - 1 И (МассивЭмодзи[ИИ].ПозицияПо + 1) < МассивЭмодзи[ИИ+1].ПозицияС Тогда
				МассивЗначений.Добавить(Сред(Текст, МассивЭмодзи[ИИ].ПозицияПо + 1, МассивЭмодзи[ИИ+1].ПозицияС - МассивЭмодзи[ИИ].ПозицияПо - 1));
			КонецЕсли;
		КонецЦикла;
		Если МассивЭмодзи[МассивЭмодзи.Количество()-1].ПозицияПо < СтрДлина(Текст) Тогда
			МассивЗначений.Добавить(Сред(Текст, МассивЭмодзи[МассивЭмодзи.Количество()-1].ПозицияПо + 1));
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивЗначений;
	
КонецФункции

Функция Эмодзи(АльфаКод, Ресурс)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АльфаКод", АльфаКод);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТелеграмЭмодзи." + Ресурс + " КАК Значение
	|ИЗ
	|	РегистрСведений.ТелеграмЭмодзи КАК ТелеграмЭмодзи
	|ГДЕ
	|	ТелеграмЭмодзи.АльфаКод = &АльфаКод";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Значение;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Инвайты
  
Функция ПроизвестиПопыткуАктивироватьИнвайт(ЧатПользователь, УникальныйИдентификатор)
	
	МассивПараметровВыдать = Новый Массив();
	МассивПараметровЗабрать = Новый Массив();
	Активирован = Ложь;
	
	РегистрыСведений.ТелеграмИнвайты.ПроизвестиПопыткуАктивироватьИнвайт(Активирован, ЧатПользователь, УникальныйИдентификатор, МассивПараметровВыдать, МассивПараметровЗабрать);	
	
	Если Активирован Тогда
		Для Каждого стр из МассивПараметровВыдать Цикл
			УстановитьПараметр(ЧатПользователь, стр, Истина);
			
		КонецЦикла;
		
		Для Каждого стр из МассивПараметровЗабрать Цикл
			УстановитьПараметр(ЧатПользователь, стр, Ложь);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Активирован;
	
КонецФункции

Функция ПроверитьДоступностьИнвайта(УникальныйИдентификатор)
	Возврат РегистрыСведений.ТелеграмИнвайты.ПроверитьДоступностьИнвайта(УникальныйИдентификатор);	
КонецФункции

Функция СгенерироватьНовыйИнвайтПользователя(МассивПараметровВыдать, МассивПараметровЗабрать, ЧатПользователь)
	
	Инвайт = РегистрыСведений.ТелеграмИнвайты.СгенерироватьНовыйИнвайтПользователя(МассивПараметровВыдать, МассивПараметровЗабрать, ЧатПользователь);	
	Возврат Инвайт;
	
КонецФункции

#КонецОбласти

#Область Таймеры
  
Процедура ТелеграмТаймеры() Экспорт
	
	РегистрыСведений.ТелеграмТаймеры.ВыполнитьЗапланированныеОбработки();
	
КонецПроцедуры

Процедура УстановитьТаймер(Бот, Обработка, 
		Вход, ДатаСрабатывания, 
		ВремяАктуальности = Неопределено, 
		Условие = Неопределено, 
		ЗначениеУсловия = Неопределено, 
		Пояснение = "") Экспорт
	
	РегистрыСведений.ТелеграмТаймеры.УстановитьВыполнениеПоТаймеру(
		Бот, Обработка, Вход, 
		ДатаСрабатывания, ВремяАктуальности,
		Условие, ЗначениеУсловия, Пояснение);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПараметрами

Процедура ДобавитьИДСообщенияВПараметр(ЧатПользователь, ПараметрыЧатаПользователя, ИмяПараметра, ИДСообщения)
	
	Если ЗначениеЗаполнено(ИДСообщения) Тогда
		ВсеИд = ПреобразоватьИзПараметраМассив(ПараметрыЧатаПользователя, ИмяПараметра);
				
		Если ТипЗнч(ИДСообщения) = Тип("Массив") Тогда
			
			Для Каждого стр из ИДСообщения Цикл
				ВсеИд.Добавить(стр);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ИДСообщения) = Тип("Строка") Тогда	
			ВсеИд.Добавить(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИДСообщения));
			
		Иначе
			ВсеИд.Добавить(ИДСообщения);
					
		КонецЕсли;		
		
		ВставитьПараметр(ПараметрыЧатаПользователя, ИмяПараметра, ВсеИд);
		УстановитьПараметр(ЧатПользователь, ИмяПараметра, ВсеИд);
		
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьИДСообщенияИзПараметра(ЧатПользователь, ПараметрыЧатаПользователя, ИмяПараметра, ИДСообщения)
	
	Если ЗначениеЗаполнено(ИДСообщения) Тогда
		ВсеИд = ПреобразоватьИзПараметраМассив(ПараметрыЧатаПользователя, ИмяПараметра);
		
		
		Если ТипЗнч(ИДСообщения) = Тип("Строка") Тогда
			ИДСообщения = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИДСообщения);
			
			Индекс = ВсеИд.Найти(ИДСообщения);
			
			Если Индекс <> Неопределено Тогда
				ВсеИд.Удалить(Индекс);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ИДСообщения) = Тип("Массив") Тогда
			
			Для Каждого стр из ИДСообщения Цикл
				Индекс = ВсеИд.Найти(стр);
				
				Если Индекс <> Неопределено Тогда
					ВсеИд.Удалить(Индекс);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Индекс = ВсеИд.Найти(ИДСообщения);
			
			Если Индекс <> Неопределено Тогда
				ВсеИд.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
				
		ВставитьПараметр(ПараметрыЧатаПользователя, ИмяПараметра, ВсеИд);
		УстановитьПараметр(ЧатПользователь, ИмяПараметра, ВсеИд);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСсылкуПараметраПоИмени(ИмяПараметра)
	
Возврат ПланыВидовХарактеристик.ТелеграмПараметры.ПолучитьСсылкуПараметраПоИмениИерархия(ИмяПараметра);	

КонецФункции

Функция ПолучитьМассивСсылокПараметровПоИменамИерархия(ИмяПараметраСтрокаМассивСтрок)
	
Возврат ПланыВидовХарактеристик.ТелеграмПараметры.ПолучитьМассивСсылокПараметровПоИменамИерархия(ИмяПараметраСтрокаМассивСтрок);	

КонецФункции

Процедура ДополнитьСтруктуруВходящегоОбновления(ВходящееОбновление) Экспорт
	
	Перем ОбъектСообщение, ОбъектСообщениеКК, 
		ОбъектЧат, ОбъектПользователь, 
		Чат, Пользователь;
		
	ОбъектСообщение = Новый Структура;
	ОбъектСообщениеКК = Новый Структура;
	ОбъектЧат = Новый Структура;
	ОбъектПользователь = Новый Структура;
	
	Если ВходящееОбновление.Свойство("edited_message") Тогда
		ОбъектСообщение = ВходящееОбновление.edited_message;
		Если ОбъектСообщение.Свойство("user") Тогда
			ОбъектПользователь = ОбъектСообщение.user;
		ИначеЕсли ОбъектСообщение.Свойство("from") Тогда
			ОбъектПользователь = ОбъектСообщение.from;
		КонецЕсли;
		ОбъектЧат = ОбъектСообщение.chat;
	ИначеЕсли ВходящееОбновление.Свойство("message") Тогда
		ОбъектСообщение = ВходящееОбновление.message;
		Если ОбъектСообщение.Свойство("user") Тогда
			ОбъектПользователь = ОбъектСообщение.user;
		ИначеЕсли ОбъектСообщение.Свойство("from") Тогда
			ОбъектПользователь = ОбъектСообщение.from;
		КонецЕсли;
		ОбъектЧат = ОбъектСообщение.chat;
	ИначеЕсли ВходящееОбновление.Свойство("edited_channel_post") Тогда
		ОбъектСообщение = ВходящееОбновление.edited_channel_post;
		Если ОбъектСообщение.Свойство("user") Тогда
			ОбъектПользователь = ОбъектСообщение.user;
		ИначеЕсли ОбъектСообщение.Свойство("from") Тогда
			ОбъектПользователь = ОбъектСообщение.from;
		КонецЕсли;
		ОбъектЧат = ОбъектСообщение.chat;
	ИначеЕсли ВходящееОбновление.Свойство("channel_post") Тогда
		ОбъектСообщение = ВходящееОбновление.channel_post;
		Если ОбъектСообщение.Свойство("user") Тогда
			ОбъектПользователь = ОбъектСообщение.user;
		ИначеЕсли ОбъектСообщение.Свойство("from") Тогда
			ОбъектПользователь = ОбъектСообщение.from;
		КонецЕсли;
		ОбъектЧат = ОбъектСообщение.chat;
	ИначеЕсли ВходящееОбновление.Свойство("callback_query") Тогда
		Если ВходящееОбновление.callback_query.Свойство("message") Тогда
			ОбъектСообщениеКК = ВходящееОбновление.callback_query.message;
			ОбъектЧат = ОбъектСообщениеКК.chat;
		КонецЕсли;
		ОбъектПользователь = ВходящееОбновление.callback_query.from;
	КонецЕсли;
	
	ИдЧата = ?(ОбъектЧат.Свойство("id"), ОбъектЧат.id, Неопределено);
	Чат = СоздатьОбновитьЧат(ОбъектЧат);
	ИдПользователя = ?(ОбъектПользователь.Свойство("id"), ОбъектПользователь.id, Неопределено);	
	Пользователь = СоздатьОбновитьПользователя(ОбъектПользователь);

	ПараметрыЧата = РегистрыСведений.ТелеграмЗначенияПараметров.ЗначенияПараметров(Чат);
	ПараметрыПользователя = ?(ИдПользователя = ИдЧата, ПараметрыЧата, 
		РегистрыСведений.ТелеграмЗначенияПараметров.ЗначенияПараметров(Пользователь));
	
	ВходящееОбновление.Вставить("Сообщение", ОбъектСообщение);
	ВходящееОбновление.Вставить("СообщениеКК", ОбъектСообщениеКК);
	ВходящееОбновление.Вставить("Текст", Сообщение(ВходящееОбновление));
	ВходящееОбновление.Вставить("ОтветКК", ОтветКонтекстнойКлавиатуры(ВходящееОбновление));
	ВходящееОбновление.Вставить("ИдЧата", ИдЧата);
	ВходящееОбновление.Вставить("Чат", Чат);
	ВходящееОбновление.Вставить("ПараметрыЧата", ПараметрыЧата);
	ВходящееОбновление.Вставить("ИдПользователя", ИдПользователя);
	ВходящееОбновление.Вставить("Пользователь", Пользователь);
	ВходящееОбновление.Вставить("ПараметрыПользователя", ПараметрыПользователя);
	ВходящееОбновление.Вставить("ИдСообщения", ?(ОбъектСообщение.Свойство("message_id"), ОбъектСообщение.message_id, ?(ОбъектСообщениеКК.Свойство("message_id"), ОбъектСообщениеКК.message_id, Неопределено)));
	ВходящееОбновление.Вставить("ОтветИдСообщения", ПрочитатьПараметр(ОбъектСообщение,"reply_to_message.message_id"));
	ВходящееОбновление.Вставить("ПрерватьВыполнение", Ложь);
	ВходящееОбновление.Вставить("ПараметрыУведомления", Новый Структура());
	
	ВыполненныеОбработки = Новый ТаблицаЗначений;
	ВыполненныеОбработки.Колонки.Добавить("Сервис", Новый ОписаниеТипов("СправочникСсылка.ТелеграмСервисы"));
	ВыполненныеОбработки.Колонки.Добавить("Обработка", Новый ОписаниеТипов("СправочникСсылка.ТелеграмОбработки"));
	ВходящееОбновление.Вставить("ВыполненныеОбработки", ВыполненныеОбработки);
	
КонецПроцедуры

Функция Подпись(ВходящееОбновление) Экспорт
	
	Ответ = Неопределено;
	Если ЗначениеЗаполнено(ВходящееОбновление.Сообщение) И ВходящееОбновление.Сообщение.Свойство("caption") Тогда
		Ответ = ВходящееОбновление.Сообщение.caption;
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции
 
Функция ОтветКонтекстнойКлавиатуры(ВходящееОбновление) Экспорт
	
	Ответ = Неопределено;
	Если ВходящееОбновление.Свойство("callback_query") И ВходящееОбновление.callback_query.Свойство("data") Тогда
		Ответ = ВходящееОбновление.callback_query.data;
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции

Функция ЗначениеСтрокой(ЛюбоеЗначение) Экспорт
	
	Если ТипЗнч(ЛюбоеЗначение) = Тип("Число") Тогда
		Ответ = Формат(ЛюбоеЗначение, "ЧГ=");
	ИначеЕсли ТипЗнч(ЛюбоеЗначение) = Тип("Структура") ИЛИ ТипЗнч(ЛюбоеЗначение) = Тип("Массив") Тогда
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,"");
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
		ЗаписатьJSON(ЗаписьJSON, ЛюбоеЗначение);
		Ответ = ЗаписьJSON.Закрыть();
	ИначеЕсли ТипЗнч(ЛюбоеЗначение) = Тип("Булево") Тогда
		Ответ = Формат(ЛюбоеЗначение, "БЛ=false; БИ=true");
	Иначе		
		Ответ = Строка(ЛюбоеЗначение);
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции

Функция Сущность(ВходящееОбновление, ТипСущности) Экспорт
	
	Ответ = Неопределено;
	Если ВходящееОбновление.Свойство("message") Тогда
		Если ВходящееОбновление.message.Свойство("entities") Тогда
			ОписанияСущностей = ВходящееОбновление.message.entities;
			Для Каждого ОписаниеСущности Из ОписанияСущностей Цикл
				Если ОписаниеСущности.type = ТипСущности Тогда
					Ответ = Сред(ВходящееОбновление.message.text, ОписаниеСущности.offset + 1, ОписаниеСущности.length);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции

Функция Сообщение(ВходящееОбновление) Экспорт
	
	Ответ = Неопределено;
	Если ЗначениеЗаполнено(ВходящееОбновление.Сообщение) И ВходящееОбновление.Сообщение.Свойство("text") Тогда
		Ответ = ВходящееОбновление.Сообщение.text;
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции

Функция ЗначениеТелеграм(Бот, Параметр1С, Значение1С, Метод, ОписаниеПараметра, Параметры1С, Вход)
	
	Если ОписаниеПараметра = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОписаниеПараметра.ЕстьПроцедура Тогда
		ПроцедураПолучения = "Получение_" + ОписаниеПараметра.Параметр;
		ЗначениеТ = ПолучениеЗначенияТелеграм(Бот, Параметр1С, Значение1С, ПроцедураПолучения, Метод, Параметры1С, Вход);
	Иначе
		ЗначениеТ = Значение1С;
	КонецЕсли;
	
	Возврат ЗначениеТ;
	
КонецФункции

Функция ПолучениеЗначенияТелеграм(Бот, Параметр1С, Значение1С, ПроцедураПолучения, Метод, Параметры1С, Вход)
	
	ЗначениеТ = Неопределено;
	Выполнить(СтрШаблон("%1(Бот, ЗначениеТ, Параметр1С, Значение1С, Метод, Параметры1С, Вход);", ПроцедураПолучения));
	Возврат ЗначениеТ; 
	
КонецФункции
 
Процедура ОчиститьПараметры(Бот, ЧатПользователь) Экспорт
	
	РегистрыСведений.ТелеграмЗначенияПараметров.ОчиститьЗначения(Бот, ЧатПользователь);
	
КонецПроцедуры

Функция ПрочитатьПараметр(ПараметрыЧатаПользователяСтруктура, ИмяПараметра) Экспорт
	
	ЗначениеПараметра = Неопределено;
	Если ТипЗнч(ПараметрыЧатаПользователяСтруктура) = Тип("Структура") Тогда
		ТекущяИерархия = ПараметрыЧатаПользователяСтруктура;
		
		Для Каждого стр из СтрРазделить(ИмяПараметра,".",Ложь) Цикл
			Если ТекущяИерархия.Свойство(стр) Тогда
				ТекущяИерархия = ТекущяИерархия[стр];	
			КонецЕсли;	
		КонецЦикла;
		
		ЗначениеПараметра = ?(ТекущяИерархия <> ПараметрыЧатаПользователяСтруктура, ТекущяИерархия, ЗначениеПараметра);
	КонецЕсли;
		
	Возврат ЗначениеПараметра;
	
КонецФункции
 
Процедура ВставитьПараметр(ПараметрыЧатаПользователя, ИмяПараметра, ЗначениеПараметра) Экспорт

	Если ТипЗнч(ПараметрыЧатаПользователя) = Тип("Структура") Тогда
		ТекущяИерархия = ПараметрыЧатаПользователя;
		ИерархияИмениПараметра = СтрРазделить(ИмяПараметра,".",Ложь);
		ИмяКонечногоПараметра = ИерархияИмениПараметра[ИерархияИмениПараметра.Количество()-1];
		
		Для Каждого стр из ИерархияИмениПараметра цикл 
			Если ТекущяИерархия.Свойство(стр)
				И стр <> ИмяКонечногоПараметра Тогда
				ТекущяИерархия = ТекущяИерархия[стр];
			Иначе
				ТекущяИерархия.Вставить(стр);
			КонецЕсли;
			
		КонецЦикла;
		
		
		ЗаполнитьЗначенияСвойств(ТекущяИерархия,Новый Структура(ИмяКонечногоПараметра,ЗначениеПараметра));
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметр(ЧатПользователь, ЗНАЧ ИмяПараметраСсылка, ЗНАЧ ЗначениеПараметра, Отказ = Ложь) Экспорт
	
	Если ТипЗнч(ИмяПараметраСсылка) = Тип("Строка") Тогда
		Параметр = ПланыВидовХарактеристик.ТелеграмПараметры.ПолучитьСсылкуПараметраПоИмениИерархия(ИмяПараметраСсылка);
	Иначе
		Параметр = ИмяПараметраСсылка;
	КонецЕсли;
	
	Хранилище = Неопределено;
	Если ТипЗнч(ЗначениеПараметра) = Тип("Массив")
		ИЛИ ТипЗнч(ЗначениеПараметра) = Тип("Структура")
		ИЛИ ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений")
		ИЛИ ТипЗнч(ЗначениеПараметра) = Тип("СписокЗначений") Тогда
		
		Хранилище = Новый ХранилищеЗначения(ЗначениеПараметра, Новый СжатиеДанных(9));
		ЗначениеПараметра = "ЗначениеВХранилищеЗначения";
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ТелеграмЗначенияПараметров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЧатПользователь = ЧатПользователь;
	МенеджерЗаписи.Параметр = Параметр;
	МенеджерЗаписи.ХранилищеЗначения = Хранилище;
	МенеджерЗаписи.Значение = ЗначениеПараметра;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ОчиститьПараметр(ЧатПользователь, ИмяПараметра) Экспорт
	
	Параметр = ПланыВидовХарактеристик.ТелеграмПараметры.ПолучитьСсылкуПараметраПоИмениИерархия(ИмяПараметра);
	
	МенеджерЗаписи = РегистрыСведений.ТелеграмЗначенияПараметров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЧатПользователь = ЧатПользователь;
	МенеджерЗаписи.Параметр = Параметр;
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

Функция ПреобразоватьИзПараметраМассив(ПараметрыЧатаПользователя, ИмяПараметра)

	ЗначениеПараметра = ПрочитатьПараметр(ПараметрыЧатаПользователя, ИмяПараметра);
	
	Результат = Новый Массив();
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда 
		Результат = ЗначениеПараметра;
	ИначеЕсли ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		Результат.Добавить(ЗначениеПараметра);
	КонецЕсли;
	
	Возврат Результат;
	
	//Результат = Новый Массив();
	//
	//Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
	//	
	//	Если ЭтоСериализованаяСтрока(ЗначениеПараметра) Тогда
	//		
	//		Попытка
	//			Результат = ЗначениеИзСтрокиВнутр(ЗначениеПараметра);	
	//		Исключение
	//			Результат.Добавить(ЗначениеПараметра);	
	//		КонецПопытки;
	//		
	//	Иначе
	//		
	//		Результат.Добавить(ЗначениеПараметра);	
	//		
	//	КонецЕсли;
	//КонецЕсли;

	//
	
КонецФункции

Функция ЭтоСериализованаяСтрока(Значение)
	
	Возврат ТипЗнч(Значение) = Тип("Строка") И СтрНайти(Значение,"{""#"",");

КонецФункции
 
Процедура ДобавитьУстановитьВПараметрМассивЗначений(ПараметрыЧатаПользователя, ЧатПользователь, ИмяПараметра, ЗначениеИлиМассив, Отказ = Ложь)

	ЗначениеПараметра = ПреобразоватьИзПараметраМассив(ПараметрыЧатаПользователя, ИмяПараметра);
	
	Если ТипЗнч(ЗначениеИлиМассив) = Тип("Массив") Тогда
		Для Каждого стр из ЗначениеИлиМассив Цикл
			ЗначениеПараметра.Добавить(стр);
		КонецЦикла;
	Иначе
		ЗначениеПараметра.Добавить(ЗначениеИлиМассив);
	КонецЕсли;
	
	УстановитьПараметр(ЧатПользователь, ИмяПараметра, ЗначениеПараметра, Отказ);
	ВставитьПараметр(ПараметрыЧатаПользователя, ИмяПараметра, ЗначениеПараметра);
	
КонецПроцедуры 

Функция СоответствиеЗначенийПараметровПользователей(МассивСсылокПараметров)

	Возврат РегистрыСведений.ТелеграмЗначенияПараметров.СоответствиеЗначенийПараметровПользователей(МассивСсылокПараметров);
	
КонецФункции


#КонецОбласти

#Область ПрисоединенныеФайлы
 
Функция ОтслеживатьПоКонтрольнойСумме(ОписаниеПараметра, ПараметрыВыполнения)
	
	ОтслеживатьПоКонтрольнойСумме = Неопределено;
	ПараметрОтслеживания = ОписаниеПараметра.ПараметрОтслеживания;
	Если ЗначениеЗаполнено(ПараметрОтслеживания) Тогда
		ЗначениеПараметраОтслеживания = Неопределено;
		ПараметрыВыполнения.Свойство("ДополнительноеСвойство_" + ПараметрОтслеживания,
			ЗначениеПараметраОтслеживания);
		Если ТипЗнч(ЗначениеПараметраОтслеживания) = Тип("Булево") Тогда
			ОтслеживатьПоКонтрольнойСумме = ЗначениеПараметраОтслеживания;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтслеживатьПоКонтрольнойСумме = Неопределено Тогда
		ОтслеживатьПоКонтрольнойСумме = ОписаниеПараметра.ОтслеживатьПоКонтрольнойСумме;
	КонецЕсли;
	
	Возврат ОтслеживатьПоКонтрольнойСумме;
	
КонецФункции

Функция КонтрольнаяСумма(ДвоичныеДанные)
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA256);
	Хеширование.Добавить(ДвоичныеДанные);
	КонтрольнаяСумма = СтрЗаменить(Строка(Хеширование.ХешСумма), " ", "");
	Возврат КонтрольнаяСумма;
	
КонецФункции

Функция ВидИсточникаДвоичныхДанных(Знач Значение)
	
	Значение = нРег(Значение);
	Если Лев(Значение, 6) = "e1cib/" Тогда
		Ответ = 1; // хранилище 1С
	ИначеЕсли Лев(Значение, 7) = "http://" ИЛИ Лев(Значение, 8) = "https://" ИЛИ Лев(Значение, 4) = "www." Тогда
		Ответ = 2; // URL
	ИначеЕсли СтрНайти(Лев(Значение, 3), "\") > 0 ИЛИ СтрНайти(Лев(Значение, 3), "/") > 0 Тогда
		Ответ = 3; // файл
	Иначе
		Ответ = 4; // file_id на сервере телеграма
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции

Процедура ИзменитьВладельцаПрисоединенныхФайлов(ПрисоединенныйФайлСсылкаМассив, НовыйИсточник)
	
	Если ТипЗнч(ПрисоединенныйФайлСсылкаМассив) = Тип("Массив") Тогда
		МассивСсылокНаФайлы = ПрисоединенныйФайлСсылкаМассив;
	Иначе
		МассивСсылокНаФайлы = Новый Массив();
		МассивСсылокНаФайлы.Добавить(ПрисоединенныйФайлСсылкаМассив);
	КонецЕсли;

	// Возвращаемое значение:
	//   Структура:
	//     * ДанныеФайла - см. ДанныеФайла
	//     * ДвоичныеДанные - ДвоичныеДанные
	//     * ДвоичныеДанныеПодписи - ДвоичныеДанные
	
	Для Каждого стр из МассивСсылокНаФайлы Цикл
		ТекущийФайл = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(стр);
		
		Параметры = ШаблонПараметрыСозданияПрисоединенногоФайла();
		ЗаполнитьЗначенияСвойств(Параметры,стр);
		
		Параметры.ИмяБезРасширения = СтрЗаменить(стр.Наименование,"."+стр.Расширение,"");
		Параметры.РасширениеБезТочки = стр.Расширение;
		Параметры.ТекстовоеОписаниеФайла = стр.Описание;
		Параметры.ВладелецФайлов = НовыйИсточник;
		
		Параметры.ДвоичныеДанные = ТекущийФайл.ДвоичныеДанные;
		НовыйФайл = СоздатьПрисоединенныйФайл(Параметры);
		
		ОбновитьСсылкуОбъектаПользователя(стр, НовыйФайл);
		
		РаботаСФайламиСлужебныйВызовСервера.РезультатУдаленияДанных(стр, Новый УникальныйИдентификатор());
		стр.ПолучитьОбъект().Удалить();
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьДвоичныеДанныеФайлаВХранилище(ПрисоединенныйФайл)

	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
	
	Возврат ?(ЗначениеЗаполнено(ДанныеФайла),ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, Неопределено)
	
КонецФункции

Функция СоздатьПрисоединенныйФайл(ПараметрыСозданияПрисоединенногоФайла)
	
	СсылкаНаДобавленныйФайл = Неопределено;
	
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ЗаполнитьЗначенияСвойств(ПараметрыФайла,ПараметрыСозданияПрисоединенногоФайла);
	
	АдресФайла = ПоместитьВоВременноеХранилище(ПараметрыСозданияПрисоединенногоФайла.ДвоичныеДанные);
	СсылкаНаДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , ПараметрыСозданияПрисоединенногоФайла.ТекстовоеОписаниеФайла, ПараметрыСозданияПрисоединенногоФайла.НоваяСсылкаНаФайл);	
	Возврат СсылкаНаДобавленныйФайл;
	
КонецФункции

Функция ПолучитьСсылкуНовогоФайла(ВладелецФайлов)
	
	Возврат РаботаСФайлами.НоваяСсылкаНаФайл(ВладелецФайлов);
	
КонецФункции

Функция ЗагрузитьПрисоединенныйФайлИзСообщения(Бот, Вход, ДопИмяФайла = "", ВладелецФайла = Неопределено, НоваяСсылкаНаФайл = Неопределено, ОтветФайлИд = Неопределено)
	
	Ответ = ЗагрузитьДвоичныеДанные(Бот, Вход, ОтветФайлИд); 	
	СсылкаНаДобавленныйФайл = Неопределено;
	
	Если ЗначениеЗаполнено(Ответ) Тогда 			
		
		ФайлИд = ПрочитатьПараметр(Ответ, "file_id");
		Параметры = ПолучитьПараметрыСозданияНовогоПрисоединенногоФайла(Бот, Вход.Пользователь, ДопИмяФайла+Ответ.ИмяФайла, Ответ.РасширениеФайла, Ответ.ДвоичныеДанные, ФайлИд);		
		
		Если ВладелецФайла <> Неопределено Тогда
			Параметры.Вставить("ВладелецФайлов", ВладелецФайла);
		КонецЕсли;
		
		Параметры.Вставить("НоваяСсылкаНаФайл",НоваяСсылкаНаФайл);
		
		СсылкаНаДобавленныйФайл = СоздатьПрисоединенныйФайл(Параметры);
		ЗаписатьНовыйОбъектПользователя(Бот, Вход.Пользователь, СсылкаНаДобавленныйФайл);
		
	КонецЕсли; 
	
	Возврат СсылкаНаДобавленныйФайл;
	
КонецФУнкции

Функция ПолучитьПараметрыСозданияНовогоПрисоединенногоФайла(Бот, ЧатПользователь, ИмяБезРасширения, РасширениеБезТочки, ДвоичныеДанные = Неопределено, ФайлИд = Неопределено)
	
	Если Ложь Тогда
		Бот = Справочники.ТелеграмБоты.ПустаяСсылка();
		ЧатПользователь = Справочники.ТелеграмЧатыПользователи.ПустаяСсылка();	
	КонецЕсли;
	
	
	Параметры = ШаблонПараметрыСозданияПрисоединенногоФайла();
	Параметры.ВладелецФайлов = ЧатПользователь;
	
	Описание = СтрШаблон("Файл загружен из телеграм
     |
	 |
     |Бот: %1
     |Дата загрузки: %2
     |Пользователь: %3
     |Имя файла: %4
	 |Ид файла: %5",
	
	Бот.Наименование,
	ТекущаяДата(),
	ЧатПользователь.Наименование,
	ИмяБезРасширения,
	ФайлИд);
		
	Параметры.ТекстовоеОписаниеФайла = Описание;
	
	Параметры.ИмяБезРасширения = ЧатПользователь.Наименование + "_" + ИмяБезРасширения;
	Параметры.РасширениеБезТочки = РасширениеБезТочки;	
	Параметры.ДвоичныеДанные = ДвоичныеДанные;
	
	Возврат Параметры
	
КонецФункции

Функция ШаблонПараметрыСозданияПрисоединенногоФайла()
	
	Параметры = Новый Структура();
	Параметры.Вставить("ВладелецФайлов",Неопределено);
	Параметры.Вставить("ИмяБезРасширения","");
	Параметры.Вставить("РасширениеБезТочки","");
	Параметры.Вставить("ТекстовоеОписаниеФайла","");
	Параметры.Вставить("ДвоичныеДанные","");
	
	Возврат Параметры;	
	
	
КонецФункции

Функция ЭтоФотоПоРасширению(ЗНАЧ Расширение)
	
	Результат = Ложь;
	РасширениеФото = "JPG JPEG JP2 JPG2 PNG BMP TIFF";
	Результат = Найти(стрЗаменить(Расширение,".",""), РасширениеФото);
	
	Возврат Результат; 
	
Конецфункции

Функция ЗагрузитьДвоичныеДанные(Бот, Вход, Ответ = Неопределено)
	
	Если Ответ = Неопределено Тогда
		Ответ = ОбработатьИнформациюОФайле(Вход);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПрочитатьПараметр(Ответ, "file_id")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("file_id", Ответ.file_id);
	ОтветСервера = ВыполнитьМетодТелеграм(Бот, "getFile", ПараметрыМетода);
	
	Если НЕ ОтветСервера.ЭтоJSON Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ОтветСервера.Структура.ok Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиБота = ТелеграмСерверПовтИсп.НастройкиБота(Бот);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = СтрШаблон("/file/bot%1/%2", НастройкиБота.Токен, ОтветСервера.Структура.result.file_path);
	
	HTTPСоединение = Новый HTTPСоединение(
		НастройкиБота.АдресАпи,,,,
		Прокси(НастройкиБота),
		НастройкиБота.ТаймаутСоединения,
		ЗащищенноеСоединение());
		
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	ДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	
	Ответ.ДвоичныеДанные = ДвоичныеДанные;
	Ответ.Вставить("ИмяФайла", СтрЗаменить(ОтветСервера.Структура.result.file_path, "/", "_"));
	
	РасширениеФайлаМассив = СтрРазделить(Ответ.ИмяФайла,".");
	Если РасширениеФайлаМассив.Количество()>1 Тогда
		Ответ.Вставить("РасширениеФайла",РасширениеФайлаМассив[РасширениеФайлаМассив.Количество()-1]);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ОбработатьИнформациюОФайле(Вход)
	
	Ответ = Новый Структура("Тип, file_id, ИмяФайла, РасширениеФайла, ДвоичныеДанные");
	ПолучитьFile_id("", Ответ, Вход.Сообщение);
	Возврат Ответ 
	
КонецФункции
 
Процедура ПолучитьFile_Id(НаименованиеСтруктуры, Ответ, Структура)
	
	Для Каждого КлючИЗначение Из Структура Цикл
		Если КлючИЗначение.Ключ = "file_id" Тогда
			Ответ.Тип = НаименованиеСтруктуры;
			Ответ.file_id = КлючИЗначение.Значение;
		ИначеЕсли КлючИЗначение.Ключ = "file_name" Тогда
			Ответ.ИмяФайла = КлючИЗначение.Значение;
		ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из КлючИЗначение.Значение Цикл
				Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
					ПолучитьFile_Id(КлючИЗначение.Ключ, Ответ, ЭлементМассива);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			ПолучитьFile_Id(КлючИЗначение.Ключ, Ответ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДвоичныеДанные(Бот, ПараметрыМетода, ОписаниеМетода, ПараметрыВыполнения)
	
	Если ОписаниеМетода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьПараметры = Новый Структура;
	
	Для Каждого КлючИЗначение Из ПараметрыМетода Цикл
		ОписаниеПараметра = ОписаниеМетода.ПараметрыМетода.Найти(КлючИЗначение.Ключ, "Параметр");
		МожетСодержатьДвоичныеДанные = ОписаниеПараметра.ДвоичныеДанные;
		Если МожетСодержатьДвоичныеДанные И ТипЗнч(КлючИЗначение.Значение) = Тип("Строка") Тогда
			ВидИсточникаДвоичныхДанных = ВидИсточникаДвоичныхДанных(КлючИЗначение.Значение);
			Если ВидИсточникаДвоичныхДанных = 1 Тогда
				ЗаменитьПараметры.Вставить(КлючИЗначение.Ключ, ПолучитьИзВременногоХранилища(КлючИЗначение.Значение));
			ИначеЕсли ВидИсточникаДвоичныхДанных = 3 Тогда
				ЗаменитьПараметры.Вставить(КлючИЗначение.Ключ, Новый ДвоичныеДанные(КлючИЗначение.Значение));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ЗаменитьПараметры Цикл
		ПараметрыМетода.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ЗаменитьПараметры.Очистить();
	
	Для Каждого КлючИЗначение Из ПараметрыМетода Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("ДвоичныеДанные") Тогда
			ОписаниеПараметра = ОписаниеМетода.ПараметрыМетода.Найти(КлючИЗначение.Ключ, "Параметр");			
			ОтслеживатьПоКонтрольнойСумме = ОтслеживатьПоКонтрольнойСумме(ОписаниеПараметра, ПараметрыВыполнения);
			Если ОтслеживатьПоКонтрольнойСумме Тогда
				КонтрольнаяСумма = КонтрольнаяСумма(КлючИЗначение.Значение);
				ПоляОтбора = Новый Структура("Бот, Параметр, КонтрольнаяСумма", Бот, КлючИЗначение.Ключ, КонтрольнаяСумма);
				КлючЗаписи = РегистрыСведений.ТелеграмИдентификаторыФайлов.Получить(ПоляОтбора);
				File_id = КлючЗаписи.Идентификатор;
				ДатаСледующейПроверки = КлючЗаписи.ДатаСледующейПроверки;
				Если ЗначениеЗаполнено(File_id) Тогда
					Если ТекущаяДата() >= ДатаСледующейПроверки Тогда
						ПараметрыМетодаGetFile = Новый Структура("file_id", File_id);
						Ответ = ВыполнитьМетодТелеграм(Бот, "getFile", ПараметрыМетодаGetFile);
						Если СтрНайти(Ответ.Строка, """ok"": true") > 0 Тогда
							ЗаменитьПараметры.Вставить(КлючИЗначение.Ключ, File_id);
							ОбновитьИдентификатор = Новый Структура("Действие, Бот, Параметр,
								|КонтрольнаяСумма, ДатаСледующейПроверки", "Обновить", 
								Бот, КлючИЗначение.Ключ, КонтрольнаяСумма, 
								ДобавитьМесяц(ТекущаяДата(), 12));
							ПараметрыВыполнения.РегистрСведений_ТелеграмИдентификаторыФайлов.
								Добавить(ОбновитьИдентификатор);
								
						Иначе
							НаборЗаписей = РегистрыСведений.ТелеграмИдентификаторыФайлов.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.Бот.Установить(Бот);
							НаборЗаписей.Отбор.Параметр.Установить(КлючИЗначение.Ключ);
							НаборЗаписей.Отбор.КонтрольнаяСумма.Установить(КонтрольнаяСумма);
							НаборЗаписей.Записать();
						КонецЕсли;
					Иначе
						ЗаменитьПараметры.Вставить(КлючИЗначение.Ключ, File_id);
					КонецЕсли;
				Иначе
					ДобавитьИдентификатор = Новый Структура("Действие, Бот, Параметр, 
						|КонтрольнаяСумма, ДатаСледующейПроверки", "Добавить",
						Бот, КлючИЗначение.Ключ, КонтрольнаяСумма,
						ДобавитьМесяц(ТекущаяДата(), 12));
					ПараметрыВыполнения.РегистрСведений_ТелеграмИдентификаторыФайлов.
						Добавить(ДобавитьИдентификатор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ЗаменитьПараметры Цикл
		ПараметрыМетода.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ПоискСчетовПоСтроке(ВходнаяСтрока, ОтобратьПервые = 0) Экспорт
	
	ТипСчетКонтрагента = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов");
	ТипКонтрагент = Тип("СправочникСсылка.Контрагенты");
	
	// Разделяем строку на термины
	ПоисковыеТермины = СтрРазделить(СокрЛП(ВходнаяСтрока), ",", Ложь);
	Для Индекс = 0 По ПоисковыеТермины.ВГраница() Цикл
		ПоисковыеТермины[Индекс] = НРег(СокрЛП(ПоисковыеТермины[Индекс]));
	КонецЦикла;
	КоличествоСлов = ПоисковыеТермины.Количество();
	
	// Создаем таблицу результатов
	Результат = Новый ТаблицаЗначений;
	//Результат.Колонки.Добавить("Тип");
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаКонтрагентов, СправочникСсылка.Контрагенты"));
	Результат.Колонки.Добавить("КоличествоСовпадений", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("КоличествоСлов", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Тип");
	
	Если НЕ ЗначениеЗаполнено(ПоисковыеТермины) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Шаг 1: Найти счета, где номер содержит любой термин
	Запрос = Новый Запрос;
	УсловияБанковскиеСчетаКонтрагентов = "";
	УсловияКонтрагенты = "";
	
	Для Каждого Термин Из ПоисковыеТермины Цикл
		УсловияБанковскиеСчетаКонтрагентов = УсловияБанковскиеСчетаКонтрагентов + ?(УсловияБанковскиеСчетаКонтрагентов = "", "", " ИЛИ ") + "НРЕГ(НомерСчета) ПОДОБНО (" + """%" + Термин +""")";
		УсловияБанковскиеСчетаКонтрагентов = УсловияБанковскиеСчетаКонтрагентов + " ИЛИ " + "НРЕГ(Владелец.Наименование) ПОДОБНО (" + """%" + Термин + "%""" +")";
		УсловияБанковскиеСчетаКонтрагентов = УсловияБанковскиеСчетаКонтрагентов + " ИЛИ " + "НРЕГ(Владелец.НаименованиеПолное) ПОДОБНО (" + """%" + Термин + "%""" +")";
		УсловияБанковскиеСчетаКонтрагентов = УсловияБанковскиеСчетаКонтрагентов + " ИЛИ " + "НРЕГ(Владелец.ИНН) ПОДОБНО (" + """%" + Термин +""")";
		УсловияБанковскиеСчетаКонтрагентов = УсловияБанковскиеСчетаКонтрагентов + " ИЛИ " + "НРЕГ(Владелец.ИНН) =" + """" + Термин + """";
		УсловияБанковскиеСчетаКонтрагентов = УсловияБанковскиеСчетаКонтрагентов + " ИЛИ " + "НРЕГ(НомерСчета) =" + """" + Термин + """";
		УсловияБанковскиеСчетаКонтрагентов = УсловияБанковскиеСчетаКонтрагентов + " ИЛИ " + "НРЕГ(Наименование) ПОДОБНО (" + """%" + Термин +""")";
		
		УсловияКонтрагенты = УсловияКонтрагенты + ?(УсловияКонтрагенты = "", "", " ИЛИ ") + "НРЕГ(ИНН) ПОДОБНО (" + """%" + Термин +""")";
		УсловияКонтрагенты = УсловияКонтрагенты + " ИЛИ " + "НРЕГ(ИНН) =" + """" + Термин + """";
		УсловияКонтрагенты = УсловияКонтрагенты + " ИЛИ " + "НРЕГ(Наименование) ПОДОБНО (" + """%" + Термин + "%""" +")";
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчетаКонтрагентов.Ссылка КАК Счет,
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Контрагент,
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК НомерСчета,
	|	БанковскиеСчетаКонтрагентов.Владелец.Наименование КАК ВладелецНаименование,
	|	БанковскиеСчетаКонтрагентов.Владелец.ИНН КАК ВладелецИНН
	|ПОМЕСТИТЬ ВТСчета
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|ГДЕ
	|	&УсловияБанковскиеСчетаКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Контргаент,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.ИНН КАК ИНН
	|ПОМЕСТИТЬ ВТКонтрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	&УсловияКонтрагенты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКонтрагент.Контргаент КАК Контргаент,
	|	ВТКонтрагент.Наименование КАК Наименование,
	|	ВТКонтрагент.ИНН КАК ИНН,
	|	ВТСчета.Счет КАК Счет,
	|	ВТСчета.НомерСчета КАК НомерСчета
	|ИЗ
	|	ВТКонтрагент КАК ВТКонтрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСчета КАК ВТСчета
	|		ПО ВТКонтрагент.Контргаент = ВТСчета.Контрагент";
	
	//Запрос.УстановитьПараметр("УсловияБанковскиеСчетаКонтрагентов", УсловияБанковскиеСчетаКонтрагентов);
	//Запрос.УстановитьПараметр("УсловияКонтрагенты", УсловияКонтрагенты);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловияБанковскиеСчетаКонтрагентов",УсловияБанковскиеСчетаКонтрагентов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловияКонтрагенты",УсловияКонтрагенты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Рассчитываем количество совпадений
		Представление = Выборка.Наименование + "#,#" + Выборка.ИНН + "#,#" + Выборка.НомерСчета;
		Представление = СтрРазделить(Представление,"#,#", Ложь);
		Представление = СтрСоединить(Представление,", ");
		
		КоличествоВхождений = 0;
		Для Каждого Термин Из ПоисковыеТермины Цикл
			КоличествоВхождений = КоличествоВхождений + Число(стрНайти(НРег(Представление),Термин)>0);
		КонецЦикла;
			
		Если КоличествоВхождений > 0 Тогда
			НоваяСтрока = Результат.Добавить();
			
			Если ЗначениеЗаполнено(Выборка.Счет) Тогда
				НоваяСтрока.Ссылка = Выборка.Счет;
				Представление = "Счет: " + Представление;
				НоваяСтрока.Тип = ТипСчетКонтрагента;
				
			Иначе
				НоваяСтрока.Ссылка = Выборка.Контргаент;
				Представление = "Контрагент: " + Представление;
				НоваяСтрока.Тип = ТипКонтрагент;
				
			КонецЕсли;
			
			НоваяСтрока.КоличествоСлов = КоличествоСлов;
			НоваяСтрока.Представление = Представление;
			НоваяСтрока.КоличествоСовпадений = КоличествоВхождений;
		КонецЕсли;
		
	КонецЦикла;
	
	// Сортируем по количеству совпадений
	Результат.Сортировать("КоличествоСовпадений Убыв");
	
	Если ОтобратьПервые > 0 Тогда
		МассивСтрок = Новый Массив();
		СчетчикСтрок = 0;
		Для Каждого стр из Результат Цикл
			МассивСтрок.Добавить(стр);	
			СчетчикСтрок = СчетчикСтрок +1;
			Если СчетчикСтрок > ОтобратьПервые Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Результат = Результат.Скопировать(МассивСтрок);	
	КонецЕсли;
	
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция БанковскиеСчетаПоКонтрагенту(Контрагент, ОтобратьПервые) Экспорт
	
	//ТипСчетКонтрагента = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов");
	//ТипКонтрагент = Тип("СправочникСсылка.Контрагенты");

	//// Создаем таблицу результатов
	//Результат = Новый ТаблицаЗначений;
	////Результат.Колонки.Добавить("Тип");
	//Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	//Результат.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаКонтрагентов, СправочникСсылка.Контрагенты"));
	//Результат.Колонки.Добавить("КоличествоСовпадений", Новый ОписаниеТипов("Число"));
	//Результат.Колонки.Добавить("КоличествоСлов", Новый ОписаниеТипов("Число"));
	//Результат.Колонки.Добавить("Тип");

	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	БанковскиеСчетаКонтрагентов.Ссылка КАК Счет,
	//	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК НомерСчета,
	//	|	БанковскиеСчетаКонтрагентов.Владелец.Наименование КАК Наименование,
	//	|	БанковскиеСчетаКонтрагентов.Владелец.ИНН КАК ИНН,
	//	|	БанковскиеСчетаКонтрагентов.Владелец КАК Контрагент
	//	|ПОМЕСТИТЬ ВТБанковскиеСчета
	//	|ИЗ
	//	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	//	|ГДЕ
	//	|	БанковскиеСчетаКонтрагентов.Владелец = &Контрагент
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ДенежныеСредстваКВыплатеОстатки.ЗаявкаНаРасходованиеДенежныхСредств.БанковскийСчет КАК ЗаявкаНаРасходованиеДенежныхСредствБанковскийСчет,
	//	|	ВЫБОР
	//	|		КОГДА ЕСТЬNULL(ДенежныеСредстваКВыплатеОстатки.СуммаОстаток, 0) <= 0
	//	|				И ЕСТЬNULL(ДенежныеСредстваКВыплатеОстатки.ЗаявкаНаРасходованиеДенежныхСредств.Проведен, ЛОЖЬ)
	//	|				И ДенежныеСредстваКВыплатеОстатки.ЗаявкаНаРасходованиеДенежныхСредств.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена)
	//	|			ТОГДА 1
	//	|		ИНАЧЕ 0
	//	|	КОНЕЦ КАК Поле1
	//	|ИЗ
	//	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(, Получатель.Ссылка = &Контрагент) КАК ДенежныеСредстваКВыплатеОстатки";
	//
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	// Рассчитываем количество совпадений
	//	Представление = Выборка.Наименование + "#,#" + Выборка.ИНН + "#,#" + Выборка.НомерСчета;
	//	Представление = СтрРазделить(Представление,"#,#", Ложь);
	//	Представление = СтрСоединить(Представление,", ");
	//	
	//	КоличествоВхождений = 0;
	//	Для Каждого Термин Из ПоисковыеТермины Цикл
	//		КоличествоВхождений = КоличествоВхождений + Число(стрНайти(НРег(Представление),Термин)>0);
	//	КонецЦикла;
	//		
	//	Если КоличествоВхождений > 0 Тогда
	//		НоваяСтрока = Результат.Добавить();
	//		
	//		Если ЗначениеЗаполнено(Выборка.Счет) Тогда
	//			НоваяСтрока.Ссылка = Выборка.Счет;
	//			Представление = "Счет: " + Представление;
	//			НоваяСтрока.Тип = ТипСчетКонтрагента;
	//			
	//		Иначе
	//			НоваяСтрока.Ссылка = Выборка.Контргаент;
	//			Представление = "Контрагент: " + Представление;
	//			НоваяСтрока.Тип = ТипКонтрагент;
	//			
	//		КонецЕсли;
	//		
	//		НоваяСтрока.КоличествоСлов = КоличествоСлов;
	//		НоваяСтрока.Представление = Представление;
	//		НоваяСтрока.КоличествоСовпадений = КоличествоВхождений;
	//	КонецЕсли;
	//КонецЦикла;
	//
	////}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//
	//


КонецФункции


#КонецОбласти
