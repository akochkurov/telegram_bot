
Процедура УстановитьВидимостьПодсистемыТелеграмДляТекущегоПользователя() Экспорт
		
	ДоступноДляВсех = Ртк_ОбщийМодульВызовСервера.ПолучитьСсылкуРТКНастройкиПрограммы("РТК_ТелеграмДоступностьПодсистемыДляВсех");
	ДоступноДляРоли = Ртк_ОбщийМодульВызовСервера.ПолучитьСсылкуРТКНастройкиПрограммы("РТК_ТелеграмДоступностьПодсистемыТолькоПоРоли");
	
	Если Ртк_ОбщийМодульВызовСервера.ЕстьРоль("ТелеграмПолныеПрава", Истина)
		ИЛИ Ртк_ОбщийМодульВызовСервера.ЕстьРоль("ТелеграмПросмотр", Истина)
		ИЛИ Ртк_ОбщийМодульВызовСервера.ЕстьРоль("ТелеграмИнвайтыИзменение", Истина) Тогда
		//ПолучитьФункциональнуюОпциюИнтерфейса("ТелеграмДоступностьПодсистемы");
		//ПолучитьПараметрыФункциональныхОпцийИнтерфейса();
		УстановитьПараметрыФункциональныхОпцийИнтерфейса(Новый Структура("РТК_ТелеграмДоступностьПодсистемы",ДоступноДляРоли));
		ОбновитьИнтерфейс();	
	Иначе
		УстановитьПараметрыФункциональныхОпцийИнтерфейса(Новый Структура("РТК_ТелеграмДоступностьПодсистемы",ДоступноДляВсех));
		ОбновитьИнтерфейс();	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОткрытьСсылку(ДанныеСобытия, СтандартнаяОбработка) Экспорт
	
	Попытка
		ИнтернетСсылка = ДанныеСобытия.Href;
	Исключение
		ИнтернетСсылка = "";
	КонецПопытки;
	
	ОО = Новый ОписаниеОповещения("ОткрытьСсылкуЗавершение", ТелеграмКлиент);
	
	Если ЗначениеЗаполнено(ИнтернетСсылка) Тогда
		СтандартнаяОбработка = Ложь;
		ФормаСписка1С = СтрНайти(ИнтернетСсылка, "e1cib/list/");
		Если ФормаСписка1С > 0 Тогда
			ОткрытьФорму(СтрШаблон("%1.ФормаСписка", Сред(ИнтернетСсылка, ФормаСписка1С + 11)),,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			НачатьЗапускПриложения(ОО, ИнтернетСсылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьСсылкуЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	// ничего не происходит
	
КонецПроцедуры

Процедура ПерейтиПоСсылкеВыбор(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ПерейтиПоНавигационнойСсылке(ДополнительныеПараметры.ИнтернетСсылка);
	КонецЕсли;
	
КонецПроцедуры

// адаптированный под современность алгоритм от 1С для раскраски кода 
// в соответствии с цветовой схемой 1С
Функция РаскраситьКод(Код) Экспорт
	
	Буфер = "";
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВСтроке", Ложь);
	Для Счт = 1 По СтрЧислоСтрок(Код) Цикл
		Стр = СтрПолучитьСтроку(Код, Счт);
		Буфер = Буфер + РаскрашиваемКод(СтруктураПараметров, стр) + Символы.ПС;
	КонецЦикла;
	
	Ответ = 
	"<!DOCTYPE html>
	|<html lang=""ru"">
	|<head>
	|    <meta charset=""UTF-8"">
	|    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
	|    <title>Код обработки</title>
	|    <base target=""_blank"">    
	|	 <style type=""text/css"">
	|		pre{
	|			font-family: Courier New;
	|			color: #0000FF;
	|			font-size: 10pt;
	|		}
	|		.k{ /* Ключевое слово */
	|			color: red;
	|		}
	|		.c{ /*Комментарий */
	|			color: green;
	|		}
	|		.s{ /* Строка */
	|			color: black;
	|		}
	|		.n{ /* Число */
	|			color: black;
	|		}
	|		.p{ /* Препроцессор */
	|			color: brown;
	|		}
	|		a:visited{ 
	|			color: #0066CC 
	|		}
	|		a:link{ 
	|			color: #0066CC 
	|		}
	|	</style>
	|</head>
	|<body>
	|	<pre>
	|%1
	|	</pre>
	|</body>
	|</html>";
	
	Ответ = СтрШаблон(Ответ, Буфер);
	
	Возврат Ответ;
	
КонецФункции

Функция РаскрашиваемКод(СтруктураПараметров, СтрокаКода)
	
	Поз = 1;
	Состояние = 0;                                   
	Токен = "";
	НачалоСтроки = 1;
	
	// Последовательно перебираются все символы строки кода
	Пока Поз <> СтрДлина(СтрокаКода) + 1 Цикл
		
		ТекущийСимвол = ПолучитьСимвол(СтрокаКода, Поз);
		Если ТекущийСимвол = "/" Тогда             
			Состояние = 1;
		ИначеЕсли ТекущийСимвол = Символы.Таб Или
				  ТекущийСимвол = " " Тогда
			Состояние = 2;
		ИначеЕсли ТекущийСимвол = """" Тогда
			Состояние = 3;
		ИначеЕсли ТекущийСимвол = "" Тогда
			Состояние = 5;
		ИначеЕсли ЭтоСпецСимволы(ТекущийСимвол) Тогда
			Состояние = 6;
		ИначеЕсли ТекущийСимвол = "#" Тогда
			Состояние = 8;
		Иначе
			Состояние = 4; 
		КонецЕсли;
		
		// Проверяется на комментарий или на символ деления
		Если Состояние = 1 Тогда
			Если Не СтруктураПараметров.ВСтроке Тогда 
				Если ПолучитьСимвол(СтрокаКода, Поз + 1) = "/" Тогда
					// Окрашиваем комментарий
					СтрокаКода = Лев(СтрокаКода, Поз - 1) + 
								"<span class=c>" + 
								Прав(СтрокаКода, СтрДлина(СтрокаКода) - Поз + 1) +
								"</span>";
					Возврат СтрокаКода;
				Иначе
					// Это символ деления
					РаскрашиваемТокен(СтрокаКода, ТекущийСимвол, Поз, "k");
					Токен = "";
				КонецЕсли;
			КонецЕсли;
		// Операции при встрече символа табуляции или пробела
		ИначеЕсли Состояние = 2 Тогда
			Если Не СтруктураПараметров.ВСтроке Тогда 
				Если Не ПустаяСтрока(Токен) Тогда
					Поз = Поз - 1;
					// Пробел после после токена, значит
					// токен - ключевое слово...
					Если ЭтоКлючевоеСлово(Токен) Тогда
						РаскрашиваемТокен(СтрокаКода, Токен, Поз, "k");
					Иначе
					// ... или число
						Попытка
							ч = Число(Токен);
							РаскрашиваемТокен(СтрокаКода, Токен, Поз, "n");
						Исключение
						КонецПопытки;
					КонецЕсли;
					Поз = Поз + 1;
					Токен = "";
				КонецЕсли;
			КонецЕсли;
		// Операции встрече символа "кавычка"
		ИначеЕсли Состояние = 3 Тогда
			// Нашли парную кавычку - окрашиваем как строку
			Если СтруктураПараметров.ВСтроке Тогда
				СтрокаКода = Лев(СтрокаКода, НачалоСтроки - 1) + 
							"<span class=s>" + 
							Сред(СтрокаКода, НачалоСтроки, Поз - НачалоСтроки + 1) +
							"</span>" +
							Прав(СтрокаКода, СтрДлина(СтрокаКода) - Поз);
				Поз = Поз + СтрДлина("<span class=s>" + "</span>");
				СтруктураПараметров.ВСтроке = Ложь;
				Токен = "";
			// Первая кавычка, запоминаем позицию и взводим флаг нахождения в строке
			Иначе
				НачалоСтроки = Поз;
				СтруктураПараметров.ВСтроке = Истина;
			КонецЕсли;
		// Встретился один из специальных символов
		ИначеЕсли Состояние = 6 Тогда
			Если Не СтруктураПараметров.ВСтроке Тогда 
				Если Не ПустаяСтрока(Токен) Тогда
					Поз = Поз - 1;
					// Дабы избежать окраски метода объекта с совпадающим
					// именем с одним из ключевых слов, проверяем текущий символ
					// на "."
					Если ЭтоКлючевоеСлово(Токен) и ТекущийСимвол <> "." Тогда
						РаскрашиваемТокен(СтрокаКода, Токен, Поз, "k");
					Иначе
						// Не ключевое слово - значит число
						Попытка
							ч = Число(Токен);
							РаскрашиваемТокен(СтрокаКода, Токен, Поз, "n");
						Исключение
						КонецПопытки;
					КонецЕсли;
					Поз = Поз + 1;
					Токен = "";
				КонецЕсли;
				// Один из специальных символов
				РаскрашиваемТокен(СтрокаКода, ТекущийСимвол, Поз, "k");
			КонецЕсли;
		// Встретился символ препроцессора
		ИначеЕсли Состояние = 8 Тогда
			Если Не СтруктураПараметров.ВСтроке Тогда 
				Поз = СтрДлина(СтрокаКода);
				РаскрашиваемТокен(СтрокаКода, СтрокаКода, Поз, "p");
			КонецЕсли;
		// Остальные символы
		ИначеЕсли Состояние = 4 Тогда
			Токен = Токен + ТекущийСимвол;
		// Конец
		ИначеЕсли Состояние = 5 Тогда
			Прервать;
		КонецЕсли;
		
		Поз = Поз + 1;
	КонецЦикла;                                   
	
	// Многострочная строка
	Если СтруктураПараметров.ВСтроке Тогда
		СтрокаКода = Лев(СтрокаКода, НачалоСтроки - 1) + 
					"<span class=s>" + 
					Сред(СтрокаКода, НачалоСтроки, Поз - НачалоСтроки + 1) +
					"</span>" +
					Прав(СтрокаКода, СтрДлина(СтрокаКода) - Поз);
		Поз = Поз + СтрДлина("<span class=s>" + "</span>");
		Токен = "";
	КонецЕсли;
	
	// Анализируем последний токен строки кода
	Если Не ПустаяСтрока(Токен) Тогда
		Если ЭтоКлючевоеСлово(Токен) Тогда
			Поз = Поз - 1;
			РаскрашиваемТокен(СтрокаКода, Токен, Поз, "k");
			Поз = Поз + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаКода;
	
КонецФункции

// Функция получения символа из строки в заданной позиции
// 
// Параметры:
//   Строка - Строка, из которой берется символ
//   Поз    - Позиция получаемого символа в строке
//
// Возвращаемое значение:
//   Символ из запрашиваемой позиции
//
Функция ПолучитьСимвол(Строка, Поз)
	
	Возврат Сред(Строка, Поз, 1);
	
КонецФункции

// Проверяется символ на принадлежность к специальным символам
//
// Параметры:
//   _Символ - Проверяемый символ
//
// Возвращаемое значение:
//   Истина, если _Символ является специальным символом, Ложь - не является.
//
Функция ЭтоСпецСимволы(_Символ)
	
	Символ = НРег(_Символ);
	Если Символ = ")" Или 
    	 Символ = "(" Или
		 Символ = "[" Или
		 Символ = "]" Или
		 Символ = "." Или
		 Символ = "," Или
		 Символ = "=" Или
		 Символ = "+" Или
		 Символ = "-" Или
		 Символ = "<" Или
		 Символ = ">" Или
		 Символ = ";" Или
		 Символ = "?" Или
		 Символ = "*" 
	Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПроверкаНачалаСтроки(ТекущаяСтрока)

	Если Найти(Лев(ТекущаяСтрока,2), "//")<>0 Тогда
		Возврат 0;
	ИначеЕсли Найти(ТекущаяСтрока, "для ")<>0 ИЛИ Найти(ТекущаяСтрока, "пока ")<>0 Тогда
		Возврат 1
	ИначеЕсли Найти(ТекущаяСтрока, "конеццикла;")<>0 Тогда
		Возврат 2
	ИначеЕсли Найти(ТекущаяСтрока, "иначеесли ")<>0 Тогда         
		Возврат 3
	ИначеЕсли Найти(ТекущаяСтрока, "если ")<>0 Тогда          
		Возврат 1
	ИначеЕсли Найти(ТекущаяСтрока, "иначе")<>0 Тогда          
		Возврат 3
	ИначеЕсли Найти(ТекущаяСтрока, "конецесли;")<>0 Тогда
		Возврат 2
	ИначеЕсли Найти(ТекущаяСтрока, "попытка")<>0 Тогда
		Возврат 1
	ИначеЕсли Найти(ТекущаяСтрока, "исключение")<>0 Тогда
		Возврат 3
	ИначеЕсли Найти(ТекущаяСтрока, "конецпопытки;")<>0 Тогда
		Возврат 2
	КонецЕсли;    

КонецФункции

Функция ФорматироватьСтроку(Текст) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.УстановитьТекст(Текст);
	
	МассивОтступов = Новый Массив;
	
	НачальнаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(1);
	
	КоличествоОтступов = СтрЧислоВхождений(НачальнаяСтрока, Символы.Таб);
	
	Пока КоличествоОтступов>0 Цикл
		МассивОтступов.Добавить(Символы.Таб);
		КоличествоОтступов = КоличествоОтступов - 1;
	КонецЦикла;
	
	РезультирующийТекст = "";
	
	Для Стр = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		
		Строка = СокрЛ(ТекстовыйДокумент.ПолучитьСтроку(Стр));
		
		ВариантОбработки = ПроверкаНачалаСтроки(Нрег(Строка));
		
		Если ВариантОбработки = 1 Тогда
			
			Для каждого Отступ Из МассивОтступов Цикл
				Строка = Отступ + Строка;	
			КонецЦикла; 
			МассивОтступов.Добавить(Символы.Таб);
			
		ИначеЕсли ВариантОбработки = 2 Тогда
			
			Если МассивОтступов.Количество()>0 Тогда
				МассивОтступов.Удалить(МассивОтступов.Количество()-1);
			КонецЕсли;
			Для каждого Отступ Из МассивОтступов Цикл
				Строка = Отступ + Строка;	
			КонецЦикла; 
			
		ИначеЕсли ВариантОбработки = 3 Тогда
			
			Если МассивОтступов.Количество()>0 Тогда
				МассивОтступов.Удалить(МассивОтступов.Количество()-1);
			КонецЕсли;
			Для каждого Отступ Из МассивОтступов Цикл
				Строка = Отступ + Строка;	
			КонецЦикла; 
			МассивОтступов.Добавить(Символы.Таб);
			
		Иначе
			
			Для каждого Отступ Из МассивОтступов Цикл
				Строка = Отступ + Строка;	
			КонецЦикла; 
			
		КонецЕсли;
		
		РезультирующийТекст = РезультирующийТекст + Строка + Символы.ПС;
		
	КонецЦикла; 
	
	//ТекстовыйДокумент.УстановитьТекст(Текст);         

	Возврат РезультирующийТекст;	
	
КонецФункции

// Процедура раскраски токена
//
// Параметры:
//   СтрокаКода - Текущая строка кода
//   Токен      - Токен, который окрашивается
//   Поз        - Позиция начала Токена в текущей строке
//   Класс      - Класс, к которому принадлежит токен
//
Процедура РаскрашиваемТокен(СтрокаКода, Токен, Поз, Класс)
	
	ДлинаТокена = СтрДлина(Токен);
	
	СтрокаКода = Лев(СтрокаКода, Поз - ДлинаТокена) + 
				"<span class=" + Класс + ">" + 
				Сред(СтрокаКода, Поз - ДлинаТокена + 1, ДлинаТокена) +
				"</span>" + 
				Прав(СтрокаКода, СтрДлина(СтрокаКода) - Поз);
	Поз = Поз + СтрДлина("<span class=>" + "</span>" + Класс);
	
КонецПроцедуры

// Токен проверяется на принадлежность к ключевым словам встроенного языка
//
// Параметры:
//   _Токен - проверяемый токен
//
// Возвращаемое значение:
//   Истина, если токен является ключевым словом встроенного языка, Ложь - не является.
//
Функция ЭтоКлючевоеСлово(_Токен)
	
	Токен = НРег(_Токен);
	Если 
		Токен = "if" Или
		Токен = "если" Или
		Токен = "then" Или
		Токен = "тогда" Или
		Токен = "elsif" Или
		Токен = "иначеесли" Или
		Токен = "else" Или
		Токен = "иначе" Или
		Токен = "endif" Или
		Токен = "конецесли" Или
		Токен = "do" Или
		Токен = "цикл" Или
		Токен = "for" Или
		Токен = "для" Или
		Токен = "to" Или
		Токен = "по" Или
		Токен = "each" Или
		Токен = "каждого" Или
		Токен = "in" Или
		Токен = "из" Или
		Токен = "while" Или
		Токен = "пока" Или
		Токен = "endDo" Или
		Токен = "конеццикла" Или
		Токен = "procedure" Или
		Токен = "процедура" Или
		Токен = "endprocedure" Или
		Токен = "конецпроцедуры" Или
		Токен = "function" Или
		Токен = "функция" Или
		Токен = "endfunction" Или
		Токен = "конецфункции" Или
		Токен = "var" Или
		Токен = "перем" Или
		Токен = "export" Или
		Токен = "экспорт" Или
		Токен = "goto" Или
		Токен = "перейти" Или
		Токен = "and" Или
		Токен = "и" Или
		Токен = "or" Или
		Токен = "или" Или
		Токен = "not" Или
		Токен = "не" Или
		Токен = "val" Или
		Токен = "знач" Или
		Токен = "break" Или
		Токен = "прервать" Или
		Токен = "continue" Или
		Токен = "продолжить" Или
		Токен = "return" Или
		Токен = "возврат" Или
		Токен = "try" Или
		Токен = "попытка" Или
		Токен = "except" Или
		Токен = "исключение" Или
		Токен = "endTry" Или
		Токен = "конецпопытки" Или
		Токен = "raise" Или
		Токен = "вызватьисключение" Или
		Токен = "false" Или
		Токен = "ложь" Или
		Токен = "true" Или
		Токен = "истина" Или
		Токен = "undefined" Или
		Токен = "неопределено" Или
		Токен = "null" Или
		Токен = "new" Или
		Токен = "новый" Или
		Токен = "execute" Или
		Токен = "выполнить"
	Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Процедура КонструкторФорматнойСтроки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КонструкторФорматнойСтрокиЗавершение", ТелеграмКлиент, ДополнительныеПараметры);
		КонструкторФорматнойСтроки = Новый КонструкторФорматнойСтроки;
		Если ДополнительныеПараметры.ФорматнаяСтрокаВалидная Тогда
			КонструкторФорматнойСтроки.Текст = ДополнительныеПараметры.ФорматнаяСтрока;
		КонецЕсли;
		КонструкторФорматнойСтроки.Показать(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонструкторФорматнойСтрокиЗавершение(Текст, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Текст) = Тип("Строка") Тогда
		ПараметрыВыполненияКоманды = ДополнительныеПараметры.ПараметрыВыполненияКоманды;
		
		ВыделенныйТекст = ПараметрыВыполненияКоманды.
			Источник.Элементы[ПараметрыВыполненияКоманды.
			Источник.ЭлементПоляТекстовогоДокумента].ВыделенныйТекст;
			
		ПолныйТекст = ПараметрыВыполненияКоманды.Источник.
			Объект[ПараметрыВыполненияКоманды.Источник.
			РеквизитПоляТекстовогоДокумента];	
			
		Если ЗначениеЗаполнено(ВыделенныйТекст) Тогда
			ВтороеВхождение = СтрНайти(ПолныйТекст, ВыделенныйТекст, , , 2);
			Если ВтороеВхождение > 0 Тогда
				ДобавитьВКонец = Истина;
				ПоказатьПредупреждение(, "Выделенный текст не уникален, поэтому форматная строка добавлена в конец текста");
			Иначе
				ДобавитьВКонец = Ложь;
			КонецЕсли;
		Иначе
			ДобавитьВКонец = Истина;
		КонецЕсли;
		
		Если ДобавитьВКонец Тогда
			ПолныйТекст = ПолныйТекст + Символы.ПС + Символы.ПС + 
			СтрШаблон("ФорматнаяСтрока = ""%1"";", Текст);
		Иначе
			ПолныйТекст = СтрЗаменить(ПолныйТекст, ВыделенныйТекст, Текст);
		КонецЕсли;
		
		ПараметрыВыполненияКоманды.Источник.
			Объект[ПараметрыВыполненияКоманды.Источник.
			РеквизитПоляТекстовогоДокумента] = ПолныйТекст;
			
		ПараметрыВыполненияКоманды.Источник.Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура КонструкторЗапроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КонструкторЗапросаЗавершение", ТелеграмКлиент, ДополнительныеПараметры);
		КонструкторЗапроса = Новый КонструкторЗапроса;
		Если ДополнительныеПараметры.ТекстЗапросаВалидный Тогда
			КонструкторЗапроса.Текст = ДополнительныеПараметры.ТекстЗапроса;
		КонецЕсли;
		КонструкторЗапроса.Показать(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонструкторЗапросаЗавершение(ТекстЗапроса, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ТекстЗапроса) = Тип("Строка") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Символы.ПС, Символы.ПС + "|");
		
		ПараметрыВыполненияКоманды = ДополнительныеПараметры.ПараметрыВыполненияКоманды;
		
		ВыделенныйТекст = ПараметрыВыполненияКоманды.
			Источник.Элементы[ПараметрыВыполненияКоманды.
			Источник.ЭлементПоляТекстовогоДокумента].ВыделенныйТекст;
			
		ПолныйТекст = ПараметрыВыполненияКоманды.Источник.
			Объект[ПараметрыВыполненияКоманды.Источник.
			РеквизитПоляТекстовогоДокумента];	
			
		Если ЗначениеЗаполнено(ВыделенныйТекст) Тогда
			ВтороеВхождение = СтрНайти(ПолныйТекст, ВыделенныйТекст, , , 2);
			Если ВтороеВхождение > 0 Тогда
				ДобавитьВКонец = Истина;
				ПоказатьПредупреждение(, "Выделенный текст не уникален, поэтому результат конструктора запроса добавлен в конец текста");
			Иначе
				ДобавитьВКонец = Ложь;
			КонецЕсли;
		Иначе
			ДобавитьВКонец = Истина;
		КонецЕсли;
		
		Если ДобавитьВКонец Тогда
			ПолныйТекст = ПолныйТекст + Символы.ПС + Символы.ПС + 
			СтрШаблон("ТекстЗапроса = %1""%2"";", Символы.ПС, ТекстЗапроса);
		Иначе
			ПолныйТекст = СтрЗаменить(ПолныйТекст, ВыделенныйТекст, ТекстЗапроса);
		КонецЕсли;
		
		ПараметрыВыполненияКоманды.Источник.
			Объект[ПараметрыВыполненияКоманды.Источник.
			РеквизитПоляТекстовогоДокумента] = ПолныйТекст;
			
		ПараметрыВыполненияКоманды.Источник.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры
